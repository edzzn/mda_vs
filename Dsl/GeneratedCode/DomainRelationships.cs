//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace edzzn.DB
{
	/// <summary>
	/// DomainRelationship ExampleModelHasElements
	/// Embedding relationship between the Model and Elements
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.ExampleModelHasElements.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.ExampleModelHasElements.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("f48744ae-63bd-4da3-bbf4-e1ade0494cab")]
	public partial class ExampleModelHasElements : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExampleModelHasElements domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf48744ae, 0x63bd, 0x4da3, 0xbb, 0xf4, 0xe1, 0xad, 0xe0, 0x49, 0x4c, 0xab);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExampleModelHasElements link in the same Partition as the given DBModel
		/// </summary>
		/// <param name="source">DBModel to use as the source of the relationship.</param>
		/// <param name="target">ExampleElement to use as the target of the relationship.</param>
		public ExampleModelHasElements(DBModel source, ExampleElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExampleModelHasElements.DBModelDomainRoleId, source), new DslModeling::RoleAssignment(ExampleModelHasElements.ElementDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasElements(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasElements(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleModelHasElements(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleModelHasElements(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DBModel domain role code
		
		/// <summary>
		/// DBModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DBModelDomainRoleId = new global::System.Guid(0x0473c2a8, 0xee0e, 0x4b1b, 0x80, 0xcf, 0xc2, 0x14, 0x1b, 0xd6, 0x0a, 0xed);
		
		/// <summary>
		/// DomainRole DBModel
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.ExampleModelHasElements/DBModel.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.ExampleModelHasElements/DBModel.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Elements", PropertyDisplayNameKey="edzzn.DB.ExampleModelHasElements/DBModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0473c2a8-ee0e-4b1b-80cf-c2141bd60aed")]
		public virtual DBModel DBModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DBModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DBModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DBModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DBModel of a ExampleElement
		/// <summary>
		/// Gets DBModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DBModel GetDBModel(ExampleElement element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ElementDomainRoleId) as DBModel;
		}
		
		/// <summary>
		/// Sets DBModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDBModel(ExampleElement element, DBModel newDBModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ElementDomainRoleId, newDBModel);
		}
		#endregion
		#region Element domain role code
		
		/// <summary>
		/// Element domain role Id.
		/// </summary>
		public static readonly global::System.Guid ElementDomainRoleId = new global::System.Guid(0x001e514d, 0xde58, 0x41cd, 0x82, 0x4a, 0xf6, 0x9b, 0x08, 0xd0, 0xee, 0x9f);
		
		/// <summary>
		/// DomainRole Element
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.ExampleModelHasElements/Element.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.ExampleModelHasElements/Element.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DBModel", PropertyDisplayNameKey="edzzn.DB.ExampleModelHasElements/Element.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("001e514d-de58-41cd-824a-f69b08d0ee9f")]
		public virtual ExampleElement Element
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExampleElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, ElementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ElementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Elements of a DBModel
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ExampleElement> GetElements(DBModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ExampleElement>, ExampleElement>(element, DBModelDomainRoleId);
		}
		#endregion
		#region DBModel link accessor
		/// <summary>
		/// Get the list of ExampleModelHasElements links to a DBModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.ExampleModelHasElements> GetLinksToElements ( global::edzzn.DB.DBModel dBModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.ExampleModelHasElements>(dBModelInstance, global::edzzn.DB.ExampleModelHasElements.DBModelDomainRoleId);
		}
		#endregion
		#region Element link accessor
		/// <summary>
		/// Get the ExampleModelHasElements link to a ExampleElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::edzzn.DB.ExampleModelHasElements GetLinkToDBModel (global::edzzn.DB.ExampleElement elementInstance)
		{
			global::System.Collections.Generic.IList<global::edzzn.DB.ExampleModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.ExampleModelHasElements>(elementInstance, global::edzzn.DB.ExampleModelHasElements.ElementDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Element not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ExampleModelHasElements instance accessors
		
		/// <summary>
		/// Get any ExampleModelHasElements links between a given DBModel and a ExampleElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.ExampleModelHasElements> GetLinks( global::edzzn.DB.DBModel source, global::edzzn.DB.ExampleElement target )
		{
			global::System.Collections.Generic.List<global::edzzn.DB.ExampleModelHasElements> outLinks = new global::System.Collections.Generic.List<global::edzzn.DB.ExampleModelHasElements>();
			global::System.Collections.Generic.IList<global::edzzn.DB.ExampleModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.ExampleModelHasElements>(source, global::edzzn.DB.ExampleModelHasElements.DBModelDomainRoleId);
			foreach ( global::edzzn.DB.ExampleModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExampleModelHasElements link between a given DBModeland a ExampleElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::edzzn.DB.ExampleModelHasElements GetLink( global::edzzn.DB.DBModel source, global::edzzn.DB.ExampleElement target )
		{
			global::System.Collections.Generic.IList<global::edzzn.DB.ExampleModelHasElements> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.ExampleModelHasElements>(source, global::edzzn.DB.ExampleModelHasElements.DBModelDomainRoleId);
			foreach ( global::edzzn.DB.ExampleModelHasElements link in links )
			{
				if ( target.Equals(link.Element) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace edzzn.DB
{
	/// <summary>
	/// DomainRelationship ExampleElementReferencesTargets
	/// Reference relationship between Elements.
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.ExampleElementReferencesTargets.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.ExampleElementReferencesTargets.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("ab26488b-d033-4e88-9ede-35a57b268865")]
	public partial class ExampleElementReferencesTargets : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ExampleElementReferencesTargets domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xab26488b, 0xd033, 0x4e88, 0x9e, 0xde, 0x35, 0xa5, 0x7b, 0x26, 0x88, 0x65);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ExampleElementReferencesTargets link in the same Partition as the given ExampleElement
		/// </summary>
		/// <param name="source">ExampleElement to use as the source of the relationship.</param>
		/// <param name="target">ExampleElement to use as the target of the relationship.</param>
		public ExampleElementReferencesTargets(ExampleElement source, ExampleElement target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ExampleElementReferencesTargets.SourceDomainRoleId, source), new DslModeling::RoleAssignment(ExampleElementReferencesTargets.TargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleElementReferencesTargets(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleElementReferencesTargets(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ExampleElementReferencesTargets(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ExampleElementReferencesTargets(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x055e2659, 0x4aaa, 0x47c4, 0x9a, 0xde, 0x79, 0x86, 0xbd, 0x90, 0xd2, 0x77);
		
		/// <summary>
		/// DomainRole Source
		/// Description for edzzn.DB.ExampleRelationship.Target
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.ExampleElementReferencesTargets/Source.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.ExampleElementReferencesTargets/Source.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="edzzn.DB.ExampleElementReferencesTargets/Source.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("055e2659-4aaa-47c4-9ade-7986bd90d277")]
		public virtual ExampleElement Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExampleElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Sources of a ExampleElement
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ExampleElement> GetSources(ExampleElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ExampleElement>, ExampleElement>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0x743fdb77, 0x1a28, 0x4309, 0xa9, 0x83, 0x3d, 0x10, 0x45, 0x74, 0xc4, 0xce);
		
		/// <summary>
		/// DomainRole Target
		/// Description for edzzn.DB.ExampleRelationship.Source
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.ExampleElementReferencesTargets/Target.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.ExampleElementReferencesTargets/Target.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="edzzn.DB.ExampleElementReferencesTargets/Target.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("743fdb77-1a28-4309-a983-3d104574c4ce")]
		public virtual ExampleElement Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ExampleElement)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Targets of a ExampleElement
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ExampleElement> GetTargets(ExampleElement element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ExampleElement>, ExampleElement>(element, SourceDomainRoleId);
		}
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of ExampleElementReferencesTargets links to a ExampleElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.ExampleElementReferencesTargets> GetLinksToTargets ( global::edzzn.DB.ExampleElement sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.ExampleElementReferencesTargets>(sourceInstance, global::edzzn.DB.ExampleElementReferencesTargets.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of ExampleElementReferencesTargets links to a ExampleElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.ExampleElementReferencesTargets> GetLinksToSources ( global::edzzn.DB.ExampleElement targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.ExampleElementReferencesTargets>(targetInstance, global::edzzn.DB.ExampleElementReferencesTargets.TargetDomainRoleId);
		}
		#endregion
		#region ExampleElementReferencesTargets instance accessors
		
		/// <summary>
		/// Get any ExampleElementReferencesTargets links between a given ExampleElement and a ExampleElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.ExampleElementReferencesTargets> GetLinks( global::edzzn.DB.ExampleElement source, global::edzzn.DB.ExampleElement target )
		{
			global::System.Collections.Generic.List<global::edzzn.DB.ExampleElementReferencesTargets> outLinks = new global::System.Collections.Generic.List<global::edzzn.DB.ExampleElementReferencesTargets>();
			global::System.Collections.Generic.IList<global::edzzn.DB.ExampleElementReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.ExampleElementReferencesTargets>(source, global::edzzn.DB.ExampleElementReferencesTargets.SourceDomainRoleId);
			foreach ( global::edzzn.DB.ExampleElementReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ExampleElementReferencesTargets link between a given ExampleElementand a ExampleElement.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::edzzn.DB.ExampleElementReferencesTargets GetLink( global::edzzn.DB.ExampleElement source, global::edzzn.DB.ExampleElement target )
		{
			global::System.Collections.Generic.IList<global::edzzn.DB.ExampleElementReferencesTargets> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.ExampleElementReferencesTargets>(source, global::edzzn.DB.ExampleElementReferencesTargets.SourceDomainRoleId);
			foreach ( global::edzzn.DB.ExampleElementReferencesTargets link in links )
			{
				if ( target.Equals(link.Target) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace edzzn.DB
{
	/// <summary>
	/// DomainRelationship DBModelTieneTabla
	/// Descripción de edzzn.DB.DBModelTieneTabla
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.DBModelTieneTabla.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.DBModelTieneTabla.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("2753516f-3ea7-42d9-9e88-b9658c919eb4")]
	public partial class DBModelTieneTabla : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DBModelTieneTabla domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2753516f, 0x3ea7, 0x42d9, 0x9e, 0x88, 0xb9, 0x65, 0x8c, 0x91, 0x9e, 0xb4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DBModelTieneTabla link in the same Partition as the given DBModel
		/// </summary>
		/// <param name="source">DBModel to use as the source of the relationship.</param>
		/// <param name="target">Tabla to use as the target of the relationship.</param>
		public DBModelTieneTabla(DBModel source, Tabla target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DBModelTieneTabla.DBModelDomainRoleId, source), new DslModeling::RoleAssignment(DBModelTieneTabla.TablaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DBModelTieneTabla(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DBModelTieneTabla(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DBModelTieneTabla(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DBModelTieneTabla(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DBModel domain role code
		
		/// <summary>
		/// DBModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DBModelDomainRoleId = new global::System.Guid(0xe1a4a26d, 0xbe3b, 0x445f, 0x91, 0x5d, 0xfe, 0xbd, 0xed, 0xe7, 0x2d, 0xd8);
		
		/// <summary>
		/// DomainRole DBModel
		/// Descripción de edzzn.DB.DBModelTieneTabla.DBModel
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.DBModelTieneTabla/DBModel.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.DBModelTieneTabla/DBModel.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Tabla", PropertyDisplayNameKey="edzzn.DB.DBModelTieneTabla/DBModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e1a4a26d-be3b-445f-915d-febdede72dd8")]
		public virtual DBModel DBModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DBModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DBModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DBModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DBModel of a Tabla
		/// <summary>
		/// Gets DBModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DBModel GetDBModel(Tabla element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TablaDomainRoleId) as DBModel;
		}
		
		/// <summary>
		/// Sets DBModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDBModel(Tabla element, DBModel newDBModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TablaDomainRoleId, newDBModel);
		}
		#endregion
		#region Tabla domain role code
		
		/// <summary>
		/// Tabla domain role Id.
		/// </summary>
		public static readonly global::System.Guid TablaDomainRoleId = new global::System.Guid(0xfc8f5c77, 0xaf65, 0x4873, 0xbc, 0x98, 0xcd, 0x33, 0xe6, 0xcd, 0xb7, 0x0e);
		
		/// <summary>
		/// DomainRole Tabla
		/// Descripción de edzzn.DB.DBModelTieneTabla.Tabla
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.DBModelTieneTabla/Tabla.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.DBModelTieneTabla/Tabla.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DBModel", PropertyDisplayNameKey="edzzn.DB.DBModelTieneTabla/Tabla.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("fc8f5c77-af65-4873-bc98-cd33e6cdb70e")]
		public virtual Tabla Tabla
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tabla)DslModeling::DomainRoleInfo.GetRolePlayer(this, TablaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TablaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tabla of a DBModel
		/// <summary>
		/// Gets a list of Tabla.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Tabla> GetTabla(DBModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Tabla>, Tabla>(element, DBModelDomainRoleId);
		}
		#endregion
		#region DBModel link accessor
		/// <summary>
		/// Get the list of DBModelTieneTabla links to a DBModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.DBModelTieneTabla> GetLinksToTabla ( global::edzzn.DB.DBModel dBModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.DBModelTieneTabla>(dBModelInstance, global::edzzn.DB.DBModelTieneTabla.DBModelDomainRoleId);
		}
		#endregion
		#region Tabla link accessor
		/// <summary>
		/// Get the DBModelTieneTabla link to a Tabla.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::edzzn.DB.DBModelTieneTabla GetLinkToDBModel (global::edzzn.DB.Tabla tablaInstance)
		{
			global::System.Collections.Generic.IList<global::edzzn.DB.DBModelTieneTabla> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.DBModelTieneTabla>(tablaInstance, global::edzzn.DB.DBModelTieneTabla.TablaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Tabla not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DBModelTieneTabla instance accessors
		
		/// <summary>
		/// Get any DBModelTieneTabla links between a given DBModel and a Tabla.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.DBModelTieneTabla> GetLinks( global::edzzn.DB.DBModel source, global::edzzn.DB.Tabla target )
		{
			global::System.Collections.Generic.List<global::edzzn.DB.DBModelTieneTabla> outLinks = new global::System.Collections.Generic.List<global::edzzn.DB.DBModelTieneTabla>();
			global::System.Collections.Generic.IList<global::edzzn.DB.DBModelTieneTabla> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.DBModelTieneTabla>(source, global::edzzn.DB.DBModelTieneTabla.DBModelDomainRoleId);
			foreach ( global::edzzn.DB.DBModelTieneTabla link in links )
			{
				if ( target.Equals(link.Tabla) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DBModelTieneTabla link between a given DBModeland a Tabla.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::edzzn.DB.DBModelTieneTabla GetLink( global::edzzn.DB.DBModel source, global::edzzn.DB.Tabla target )
		{
			global::System.Collections.Generic.IList<global::edzzn.DB.DBModelTieneTabla> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.DBModelTieneTabla>(source, global::edzzn.DB.DBModelTieneTabla.DBModelDomainRoleId);
			foreach ( global::edzzn.DB.DBModelTieneTabla link in links )
			{
				if ( target.Equals(link.Tabla) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace edzzn.DB
{
	/// <summary>
	/// DomainRelationship DBModelTieneVista
	/// Descripción de edzzn.DB.DBModelTieneVista
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.DBModelTieneVista.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.DBModelTieneVista.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("82ddf245-f146-44e8-983d-0c44d64c509b")]
	public partial class DBModelTieneVista : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DBModelTieneVista domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x82ddf245, 0xf146, 0x44e8, 0x98, 0x3d, 0x0c, 0x44, 0xd6, 0x4c, 0x50, 0x9b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DBModelTieneVista link in the same Partition as the given DBModel
		/// </summary>
		/// <param name="source">DBModel to use as the source of the relationship.</param>
		/// <param name="target">Vista to use as the target of the relationship.</param>
		public DBModelTieneVista(DBModel source, Vista target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DBModelTieneVista.DBModelDomainRoleId, source), new DslModeling::RoleAssignment(DBModelTieneVista.VistaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DBModelTieneVista(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DBModelTieneVista(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DBModelTieneVista(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DBModelTieneVista(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DBModel domain role code
		
		/// <summary>
		/// DBModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DBModelDomainRoleId = new global::System.Guid(0xe785bd9c, 0x0a4c, 0x4c8c, 0xa1, 0xa0, 0xc4, 0x9b, 0x66, 0xea, 0xe2, 0x0a);
		
		/// <summary>
		/// DomainRole DBModel
		/// Descripción de edzzn.DB.DBModelTieneVista.DBModel
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.DBModelTieneVista/DBModel.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.DBModelTieneVista/DBModel.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Vista", PropertyDisplayNameKey="edzzn.DB.DBModelTieneVista/DBModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e785bd9c-0a4c-4c8c-a1a0-c49b66eae20a")]
		public virtual DBModel DBModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DBModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DBModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DBModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DBModel of a Vista
		/// <summary>
		/// Gets DBModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DBModel GetDBModel(Vista element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, VistaDomainRoleId) as DBModel;
		}
		
		/// <summary>
		/// Sets DBModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDBModel(Vista element, DBModel newDBModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, VistaDomainRoleId, newDBModel);
		}
		#endregion
		#region Vista domain role code
		
		/// <summary>
		/// Vista domain role Id.
		/// </summary>
		public static readonly global::System.Guid VistaDomainRoleId = new global::System.Guid(0xc749594a, 0xca04, 0x4f80, 0x8f, 0xc1, 0x8b, 0x58, 0x96, 0xfb, 0xf4, 0xd5);
		
		/// <summary>
		/// DomainRole Vista
		/// Descripción de edzzn.DB.DBModelTieneVista.Vista
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.DBModelTieneVista/Vista.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.DBModelTieneVista/Vista.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DBModel", PropertyDisplayNameKey="edzzn.DB.DBModelTieneVista/Vista.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c749594a-ca04-4f80-8fc1-8b5896fbf4d5")]
		public virtual Vista Vista
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Vista)DslModeling::DomainRoleInfo.GetRolePlayer(this, VistaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, VistaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Vista of a DBModel
		/// <summary>
		/// Gets a list of Vista.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Vista> GetVista(DBModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Vista>, Vista>(element, DBModelDomainRoleId);
		}
		#endregion
		#region DBModel link accessor
		/// <summary>
		/// Get the list of DBModelTieneVista links to a DBModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.DBModelTieneVista> GetLinksToVista ( global::edzzn.DB.DBModel dBModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.DBModelTieneVista>(dBModelInstance, global::edzzn.DB.DBModelTieneVista.DBModelDomainRoleId);
		}
		#endregion
		#region Vista link accessor
		/// <summary>
		/// Get the DBModelTieneVista link to a Vista.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::edzzn.DB.DBModelTieneVista GetLinkToDBModel (global::edzzn.DB.Vista vistaInstance)
		{
			global::System.Collections.Generic.IList<global::edzzn.DB.DBModelTieneVista> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.DBModelTieneVista>(vistaInstance, global::edzzn.DB.DBModelTieneVista.VistaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Vista not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DBModelTieneVista instance accessors
		
		/// <summary>
		/// Get any DBModelTieneVista links between a given DBModel and a Vista.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.DBModelTieneVista> GetLinks( global::edzzn.DB.DBModel source, global::edzzn.DB.Vista target )
		{
			global::System.Collections.Generic.List<global::edzzn.DB.DBModelTieneVista> outLinks = new global::System.Collections.Generic.List<global::edzzn.DB.DBModelTieneVista>();
			global::System.Collections.Generic.IList<global::edzzn.DB.DBModelTieneVista> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.DBModelTieneVista>(source, global::edzzn.DB.DBModelTieneVista.DBModelDomainRoleId);
			foreach ( global::edzzn.DB.DBModelTieneVista link in links )
			{
				if ( target.Equals(link.Vista) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DBModelTieneVista link between a given DBModeland a Vista.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::edzzn.DB.DBModelTieneVista GetLink( global::edzzn.DB.DBModel source, global::edzzn.DB.Vista target )
		{
			global::System.Collections.Generic.IList<global::edzzn.DB.DBModelTieneVista> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.DBModelTieneVista>(source, global::edzzn.DB.DBModelTieneVista.DBModelDomainRoleId);
			foreach ( global::edzzn.DB.DBModelTieneVista link in links )
			{
				if ( target.Equals(link.Vista) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace edzzn.DB
{
	/// <summary>
	/// DomainRelationship DBModelTieneProcedimientoAlmacenado
	/// Descripción de edzzn.DB.DBModelTieneProcedimientoAlmacenado
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.DBModelTieneProcedimientoAlmacenado.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.DBModelTieneProcedimientoAlmacenado.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("246955a6-fc3f-4721-bda6-b02538a66a1b")]
	public partial class DBModelTieneProcedimientoAlmacenado : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DBModelTieneProcedimientoAlmacenado domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x246955a6, 0xfc3f, 0x4721, 0xbd, 0xa6, 0xb0, 0x25, 0x38, 0xa6, 0x6a, 0x1b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DBModelTieneProcedimientoAlmacenado link in the same Partition as the given DBModel
		/// </summary>
		/// <param name="source">DBModel to use as the source of the relationship.</param>
		/// <param name="target">ProcedimientoAlmacenado to use as the target of the relationship.</param>
		public DBModelTieneProcedimientoAlmacenado(DBModel source, ProcedimientoAlmacenado target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DBModelTieneProcedimientoAlmacenado.DBModelDomainRoleId, source), new DslModeling::RoleAssignment(DBModelTieneProcedimientoAlmacenado.ProcedimientoAlmacenadoDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DBModelTieneProcedimientoAlmacenado(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DBModelTieneProcedimientoAlmacenado(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DBModelTieneProcedimientoAlmacenado(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DBModelTieneProcedimientoAlmacenado(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DBModel domain role code
		
		/// <summary>
		/// DBModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DBModelDomainRoleId = new global::System.Guid(0x7abd8f7c, 0x64ff, 0x430e, 0x85, 0x94, 0x2a, 0x7e, 0x35, 0x67, 0xdf, 0xa9);
		
		/// <summary>
		/// DomainRole DBModel
		/// Descripción de edzzn.DB.DBModelTieneProcedimientoAlmacenado.DBModel
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.DBModelTieneProcedimientoAlmacenado/DBModel.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.DBModelTieneProcedimientoAlmacenado/DBModel.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ProcedimientoAlmacenado", PropertyDisplayNameKey="edzzn.DB.DBModelTieneProcedimientoAlmacenado/DBModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7abd8f7c-64ff-430e-8594-2a7e3567dfa9")]
		public virtual DBModel DBModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DBModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DBModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DBModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DBModel of a ProcedimientoAlmacenado
		/// <summary>
		/// Gets DBModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DBModel GetDBModel(ProcedimientoAlmacenado element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ProcedimientoAlmacenadoDomainRoleId) as DBModel;
		}
		
		/// <summary>
		/// Sets DBModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDBModel(ProcedimientoAlmacenado element, DBModel newDBModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ProcedimientoAlmacenadoDomainRoleId, newDBModel);
		}
		#endregion
		#region ProcedimientoAlmacenado domain role code
		
		/// <summary>
		/// ProcedimientoAlmacenado domain role Id.
		/// </summary>
		public static readonly global::System.Guid ProcedimientoAlmacenadoDomainRoleId = new global::System.Guid(0xe804db5e, 0x27ce, 0x4244, 0x86, 0xdd, 0xdc, 0x01, 0xee, 0x1a, 0xf6, 0x35);
		
		/// <summary>
		/// DomainRole ProcedimientoAlmacenado
		/// Descripción de
		/// edzzn.DB.DBModelTieneProcedimientoAlmacenado.ProcedimientoAlmacenado
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.DBModelTieneProcedimientoAlmacenado/ProcedimientoAlmacenado.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.DBModelTieneProcedimientoAlmacenado/ProcedimientoAlmacenado.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DBModel", PropertyDisplayNameKey="edzzn.DB.DBModelTieneProcedimientoAlmacenado/ProcedimientoAlmacenado.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("e804db5e-27ce-4244-86dd-dc01ee1af635")]
		public virtual ProcedimientoAlmacenado ProcedimientoAlmacenado
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ProcedimientoAlmacenado)DslModeling::DomainRoleInfo.GetRolePlayer(this, ProcedimientoAlmacenadoDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ProcedimientoAlmacenadoDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ProcedimientoAlmacenado of a DBModel
		/// <summary>
		/// Gets a list of ProcedimientoAlmacenado.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ProcedimientoAlmacenado> GetProcedimientoAlmacenado(DBModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ProcedimientoAlmacenado>, ProcedimientoAlmacenado>(element, DBModelDomainRoleId);
		}
		#endregion
		#region DBModel link accessor
		/// <summary>
		/// Get the list of DBModelTieneProcedimientoAlmacenado links to a DBModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.DBModelTieneProcedimientoAlmacenado> GetLinksToProcedimientoAlmacenado ( global::edzzn.DB.DBModel dBModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.DBModelTieneProcedimientoAlmacenado>(dBModelInstance, global::edzzn.DB.DBModelTieneProcedimientoAlmacenado.DBModelDomainRoleId);
		}
		#endregion
		#region ProcedimientoAlmacenado link accessor
		/// <summary>
		/// Get the DBModelTieneProcedimientoAlmacenado link to a ProcedimientoAlmacenado.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::edzzn.DB.DBModelTieneProcedimientoAlmacenado GetLinkToDBModel (global::edzzn.DB.ProcedimientoAlmacenado procedimientoAlmacenadoInstance)
		{
			global::System.Collections.Generic.IList<global::edzzn.DB.DBModelTieneProcedimientoAlmacenado> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.DBModelTieneProcedimientoAlmacenado>(procedimientoAlmacenadoInstance, global::edzzn.DB.DBModelTieneProcedimientoAlmacenado.ProcedimientoAlmacenadoDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ProcedimientoAlmacenado not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DBModelTieneProcedimientoAlmacenado instance accessors
		
		/// <summary>
		/// Get any DBModelTieneProcedimientoAlmacenado links between a given DBModel and a ProcedimientoAlmacenado.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.DBModelTieneProcedimientoAlmacenado> GetLinks( global::edzzn.DB.DBModel source, global::edzzn.DB.ProcedimientoAlmacenado target )
		{
			global::System.Collections.Generic.List<global::edzzn.DB.DBModelTieneProcedimientoAlmacenado> outLinks = new global::System.Collections.Generic.List<global::edzzn.DB.DBModelTieneProcedimientoAlmacenado>();
			global::System.Collections.Generic.IList<global::edzzn.DB.DBModelTieneProcedimientoAlmacenado> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.DBModelTieneProcedimientoAlmacenado>(source, global::edzzn.DB.DBModelTieneProcedimientoAlmacenado.DBModelDomainRoleId);
			foreach ( global::edzzn.DB.DBModelTieneProcedimientoAlmacenado link in links )
			{
				if ( target.Equals(link.ProcedimientoAlmacenado) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DBModelTieneProcedimientoAlmacenado link between a given DBModeland a ProcedimientoAlmacenado.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::edzzn.DB.DBModelTieneProcedimientoAlmacenado GetLink( global::edzzn.DB.DBModel source, global::edzzn.DB.ProcedimientoAlmacenado target )
		{
			global::System.Collections.Generic.IList<global::edzzn.DB.DBModelTieneProcedimientoAlmacenado> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.DBModelTieneProcedimientoAlmacenado>(source, global::edzzn.DB.DBModelTieneProcedimientoAlmacenado.DBModelDomainRoleId);
			foreach ( global::edzzn.DB.DBModelTieneProcedimientoAlmacenado link in links )
			{
				if ( target.Equals(link.ProcedimientoAlmacenado) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace edzzn.DB
{
	/// <summary>
	/// DomainRelationship TablaTieneCampo
	/// Descripción de edzzn.DB.TablaTieneCampo
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.TablaTieneCampo.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.TablaTieneCampo.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("e1d079c9-ff66-4e07-b9b4-accf3e3138ab")]
	public partial class TablaTieneCampo : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TablaTieneCampo domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe1d079c9, 0xff66, 0x4e07, 0xb9, 0xb4, 0xac, 0xcf, 0x3e, 0x31, 0x38, 0xab);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TablaTieneCampo link in the same Partition as the given Tabla
		/// </summary>
		/// <param name="source">Tabla to use as the source of the relationship.</param>
		/// <param name="target">Campo to use as the target of the relationship.</param>
		public TablaTieneCampo(Tabla source, Campo target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TablaTieneCampo.TablaDomainRoleId, source), new DslModeling::RoleAssignment(TablaTieneCampo.CampoDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TablaTieneCampo(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TablaTieneCampo(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TablaTieneCampo(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TablaTieneCampo(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Tabla domain role code
		
		/// <summary>
		/// Tabla domain role Id.
		/// </summary>
		public static readonly global::System.Guid TablaDomainRoleId = new global::System.Guid(0x67c27c15, 0x8466, 0x488a, 0xbd, 0x83, 0xef, 0xaf, 0xaf, 0xd1, 0x84, 0x84);
		
		/// <summary>
		/// DomainRole Tabla
		/// Descripción de edzzn.DB.TablaTieneCampo.Tabla
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.TablaTieneCampo/Tabla.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.TablaTieneCampo/Tabla.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Campo", PropertyDisplayNameKey="edzzn.DB.TablaTieneCampo/Tabla.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("67c27c15-8466-488a-bd83-efafafd18484")]
		public virtual Tabla Tabla
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tabla)DslModeling::DomainRoleInfo.GetRolePlayer(this, TablaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TablaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tabla of a Campo
		/// <summary>
		/// Gets Tabla.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Tabla GetTabla(Campo element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CampoDomainRoleId) as Tabla;
		}
		
		/// <summary>
		/// Sets Tabla.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTabla(Campo element, Tabla newTabla)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CampoDomainRoleId, newTabla);
		}
		#endregion
		#region Campo domain role code
		
		/// <summary>
		/// Campo domain role Id.
		/// </summary>
		public static readonly global::System.Guid CampoDomainRoleId = new global::System.Guid(0x0507e6ec, 0x8923, 0x4f28, 0xb9, 0x2a, 0x90, 0x9e, 0x90, 0xe4, 0x75, 0xaf);
		
		/// <summary>
		/// DomainRole Campo
		/// Descripción de edzzn.DB.TablaTieneCampo.Campo
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.TablaTieneCampo/Campo.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.TablaTieneCampo/Campo.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Tabla", PropertyDisplayNameKey="edzzn.DB.TablaTieneCampo/Campo.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("0507e6ec-8923-4f28-b92a-909e90e475af")]
		public virtual Campo Campo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Campo)DslModeling::DomainRoleInfo.GetRolePlayer(this, CampoDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CampoDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Campo of a Tabla
		/// <summary>
		/// Gets a list of Campo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Campo> GetCampo(Tabla element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Campo>, Campo>(element, TablaDomainRoleId);
		}
		#endregion
		#region Tabla link accessor
		/// <summary>
		/// Get the list of TablaTieneCampo links to a Tabla.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.TablaTieneCampo> GetLinksToCampo ( global::edzzn.DB.Tabla tablaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.TablaTieneCampo>(tablaInstance, global::edzzn.DB.TablaTieneCampo.TablaDomainRoleId);
		}
		#endregion
		#region Campo link accessor
		/// <summary>
		/// Get the TablaTieneCampo link to a Campo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::edzzn.DB.TablaTieneCampo GetLinkToTabla (global::edzzn.DB.Campo campoInstance)
		{
			global::System.Collections.Generic.IList<global::edzzn.DB.TablaTieneCampo> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.TablaTieneCampo>(campoInstance, global::edzzn.DB.TablaTieneCampo.CampoDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Campo not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TablaTieneCampo instance accessors
		
		/// <summary>
		/// Get any TablaTieneCampo links between a given Tabla and a Campo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.TablaTieneCampo> GetLinks( global::edzzn.DB.Tabla source, global::edzzn.DB.Campo target )
		{
			global::System.Collections.Generic.List<global::edzzn.DB.TablaTieneCampo> outLinks = new global::System.Collections.Generic.List<global::edzzn.DB.TablaTieneCampo>();
			global::System.Collections.Generic.IList<global::edzzn.DB.TablaTieneCampo> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.TablaTieneCampo>(source, global::edzzn.DB.TablaTieneCampo.TablaDomainRoleId);
			foreach ( global::edzzn.DB.TablaTieneCampo link in links )
			{
				if ( target.Equals(link.Campo) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TablaTieneCampo link between a given Tablaand a Campo.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::edzzn.DB.TablaTieneCampo GetLink( global::edzzn.DB.Tabla source, global::edzzn.DB.Campo target )
		{
			global::System.Collections.Generic.IList<global::edzzn.DB.TablaTieneCampo> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.TablaTieneCampo>(source, global::edzzn.DB.TablaTieneCampo.TablaDomainRoleId);
			foreach ( global::edzzn.DB.TablaTieneCampo link in links )
			{
				if ( target.Equals(link.Campo) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace edzzn.DB
{
	/// <summary>
	/// DomainRelationship TablaTieneClavePrimaria
	/// Descripción de edzzn.DB.TablaTieneClavePrimaria
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.TablaTieneClavePrimaria.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.TablaTieneClavePrimaria.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("b68e21ec-47fc-4169-b751-3fff9ef60b7f")]
	public partial class TablaTieneClavePrimaria : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TablaTieneClavePrimaria domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb68e21ec, 0x47fc, 0x4169, 0xb7, 0x51, 0x3f, 0xff, 0x9e, 0xf6, 0x0b, 0x7f);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TablaTieneClavePrimaria link in the same Partition as the given Tabla
		/// </summary>
		/// <param name="source">Tabla to use as the source of the relationship.</param>
		/// <param name="target">ClavePrimaria to use as the target of the relationship.</param>
		public TablaTieneClavePrimaria(Tabla source, ClavePrimaria target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TablaTieneClavePrimaria.TablaDomainRoleId, source), new DslModeling::RoleAssignment(TablaTieneClavePrimaria.ClavePrimariaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TablaTieneClavePrimaria(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TablaTieneClavePrimaria(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TablaTieneClavePrimaria(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TablaTieneClavePrimaria(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Tabla domain role code
		
		/// <summary>
		/// Tabla domain role Id.
		/// </summary>
		public static readonly global::System.Guid TablaDomainRoleId = new global::System.Guid(0x6b3e4d84, 0xd69b, 0x4167, 0xb8, 0x60, 0x9a, 0xc9, 0x1a, 0xa1, 0xdd, 0x47);
		
		/// <summary>
		/// DomainRole Tabla
		/// Descripción de edzzn.DB.TablaTieneClavePrimaria.Tabla
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.TablaTieneClavePrimaria/Tabla.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.TablaTieneClavePrimaria/Tabla.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "ClavePrimaria", PropertyDisplayNameKey="edzzn.DB.TablaTieneClavePrimaria/Tabla.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6b3e4d84-d69b-4167-b860-9ac91aa1dd47")]
		public virtual Tabla Tabla
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tabla)DslModeling::DomainRoleInfo.GetRolePlayer(this, TablaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TablaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tabla of a ClavePrimaria
		/// <summary>
		/// Gets Tabla.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Tabla GetTabla(ClavePrimaria element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ClavePrimariaDomainRoleId) as Tabla;
		}
		
		/// <summary>
		/// Sets Tabla.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTabla(ClavePrimaria element, Tabla newTabla)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ClavePrimariaDomainRoleId, newTabla);
		}
		#endregion
		#region ClavePrimaria domain role code
		
		/// <summary>
		/// ClavePrimaria domain role Id.
		/// </summary>
		public static readonly global::System.Guid ClavePrimariaDomainRoleId = new global::System.Guid(0x66fa5649, 0xb5b9, 0x4e74, 0xac, 0x95, 0xcb, 0x06, 0x32, 0x4b, 0x04, 0xe6);
		
		/// <summary>
		/// DomainRole ClavePrimaria
		/// Descripción de edzzn.DB.TablaTieneClavePrimaria.ClavePrimaria
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.TablaTieneClavePrimaria/ClavePrimaria.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.TablaTieneClavePrimaria/ClavePrimaria.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Tabla", PropertyDisplayNameKey="edzzn.DB.TablaTieneClavePrimaria/ClavePrimaria.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("66fa5649-b5b9-4e74-ac95-cb06324b04e6")]
		public virtual ClavePrimaria ClavePrimaria
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ClavePrimaria)DslModeling::DomainRoleInfo.GetRolePlayer(this, ClavePrimariaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ClavePrimariaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ClavePrimaria of a Tabla
		/// <summary>
		/// Gets a list of ClavePrimaria.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ClavePrimaria> GetClavePrimaria(Tabla element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<ClavePrimaria>, ClavePrimaria>(element, TablaDomainRoleId);
		}
		#endregion
		#region Tabla link accessor
		/// <summary>
		/// Get the list of TablaTieneClavePrimaria links to a Tabla.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.TablaTieneClavePrimaria> GetLinksToClavePrimaria ( global::edzzn.DB.Tabla tablaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.TablaTieneClavePrimaria>(tablaInstance, global::edzzn.DB.TablaTieneClavePrimaria.TablaDomainRoleId);
		}
		#endregion
		#region ClavePrimaria link accessor
		/// <summary>
		/// Get the TablaTieneClavePrimaria link to a ClavePrimaria.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::edzzn.DB.TablaTieneClavePrimaria GetLinkToTabla (global::edzzn.DB.ClavePrimaria clavePrimariaInstance)
		{
			global::System.Collections.Generic.IList<global::edzzn.DB.TablaTieneClavePrimaria> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.TablaTieneClavePrimaria>(clavePrimariaInstance, global::edzzn.DB.TablaTieneClavePrimaria.ClavePrimariaDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of ClavePrimaria not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TablaTieneClavePrimaria instance accessors
		
		/// <summary>
		/// Get any TablaTieneClavePrimaria links between a given Tabla and a ClavePrimaria.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.TablaTieneClavePrimaria> GetLinks( global::edzzn.DB.Tabla source, global::edzzn.DB.ClavePrimaria target )
		{
			global::System.Collections.Generic.List<global::edzzn.DB.TablaTieneClavePrimaria> outLinks = new global::System.Collections.Generic.List<global::edzzn.DB.TablaTieneClavePrimaria>();
			global::System.Collections.Generic.IList<global::edzzn.DB.TablaTieneClavePrimaria> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.TablaTieneClavePrimaria>(source, global::edzzn.DB.TablaTieneClavePrimaria.TablaDomainRoleId);
			foreach ( global::edzzn.DB.TablaTieneClavePrimaria link in links )
			{
				if ( target.Equals(link.ClavePrimaria) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TablaTieneClavePrimaria link between a given Tablaand a ClavePrimaria.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::edzzn.DB.TablaTieneClavePrimaria GetLink( global::edzzn.DB.Tabla source, global::edzzn.DB.ClavePrimaria target )
		{
			global::System.Collections.Generic.IList<global::edzzn.DB.TablaTieneClavePrimaria> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.TablaTieneClavePrimaria>(source, global::edzzn.DB.TablaTieneClavePrimaria.TablaDomainRoleId);
			foreach ( global::edzzn.DB.TablaTieneClavePrimaria link in links )
			{
				if ( target.Equals(link.ClavePrimaria) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace edzzn.DB
{
	/// <summary>
	/// DomainRelationship DBModelTieneRelacion
	/// Descripción de edzzn.DB.DBModelTieneRelacion
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.DBModelTieneRelacion.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.DBModelTieneRelacion.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("a04ec072-ae0a-4609-bf26-a0187a7f64ba")]
	public partial class DBModelTieneRelacion : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DBModelTieneRelacion domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xa04ec072, 0xae0a, 0x4609, 0xbf, 0x26, 0xa0, 0x18, 0x7a, 0x7f, 0x64, 0xba);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DBModelTieneRelacion link in the same Partition as the given DBModel
		/// </summary>
		/// <param name="source">DBModel to use as the source of the relationship.</param>
		/// <param name="target">Relacion to use as the target of the relationship.</param>
		public DBModelTieneRelacion(DBModel source, Relacion target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DBModelTieneRelacion.DBModelDomainRoleId, source), new DslModeling::RoleAssignment(DBModelTieneRelacion.RelacionDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DBModelTieneRelacion(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DBModelTieneRelacion(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DBModelTieneRelacion(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DBModelTieneRelacion(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DBModel domain role code
		
		/// <summary>
		/// DBModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DBModelDomainRoleId = new global::System.Guid(0xf0b0ef68, 0xadc1, 0x4190, 0x99, 0x0f, 0xda, 0x78, 0xfe, 0x7f, 0xb3, 0x80);
		
		/// <summary>
		/// DomainRole DBModel
		/// Descripción de edzzn.DB.DBModelTieneRelacion.DBModel
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.DBModelTieneRelacion/DBModel.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.DBModelTieneRelacion/DBModel.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Relacion", PropertyDisplayNameKey="edzzn.DB.DBModelTieneRelacion/DBModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f0b0ef68-adc1-4190-990f-da78fe7fb380")]
		public virtual DBModel DBModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DBModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DBModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DBModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DBModel of a Relacion
		/// <summary>
		/// Gets DBModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DBModel GetDBModel(Relacion element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, RelacionDomainRoleId) as DBModel;
		}
		
		/// <summary>
		/// Sets DBModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDBModel(Relacion element, DBModel newDBModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, RelacionDomainRoleId, newDBModel);
		}
		#endregion
		#region Relacion domain role code
		
		/// <summary>
		/// Relacion domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelacionDomainRoleId = new global::System.Guid(0xc1206b9e, 0xfb3e, 0x43f3, 0xac, 0x15, 0x1a, 0xd3, 0x8e, 0x04, 0x68, 0x16);
		
		/// <summary>
		/// DomainRole Relacion
		/// Descripción de edzzn.DB.DBModelTieneRelacion.Relacion
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.DBModelTieneRelacion/Relacion.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.DBModelTieneRelacion/Relacion.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DBModel", PropertyDisplayNameKey="edzzn.DB.DBModelTieneRelacion/Relacion.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c1206b9e-fb3e-43f3-ac15-1ad38e046816")]
		public virtual Relacion Relacion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Relacion)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelacionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelacionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Relacion of a DBModel
		/// <summary>
		/// Gets a list of Relacion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Relacion> GetRelacion(DBModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Relacion>, Relacion>(element, DBModelDomainRoleId);
		}
		#endregion
		#region DBModel link accessor
		/// <summary>
		/// Get the list of DBModelTieneRelacion links to a DBModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.DBModelTieneRelacion> GetLinksToRelacion ( global::edzzn.DB.DBModel dBModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.DBModelTieneRelacion>(dBModelInstance, global::edzzn.DB.DBModelTieneRelacion.DBModelDomainRoleId);
		}
		#endregion
		#region Relacion link accessor
		/// <summary>
		/// Get the DBModelTieneRelacion link to a Relacion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::edzzn.DB.DBModelTieneRelacion GetLinkToDBModel (global::edzzn.DB.Relacion relacionInstance)
		{
			global::System.Collections.Generic.IList<global::edzzn.DB.DBModelTieneRelacion> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.DBModelTieneRelacion>(relacionInstance, global::edzzn.DB.DBModelTieneRelacion.RelacionDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Relacion not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DBModelTieneRelacion instance accessors
		
		/// <summary>
		/// Get any DBModelTieneRelacion links between a given DBModel and a Relacion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.DBModelTieneRelacion> GetLinks( global::edzzn.DB.DBModel source, global::edzzn.DB.Relacion target )
		{
			global::System.Collections.Generic.List<global::edzzn.DB.DBModelTieneRelacion> outLinks = new global::System.Collections.Generic.List<global::edzzn.DB.DBModelTieneRelacion>();
			global::System.Collections.Generic.IList<global::edzzn.DB.DBModelTieneRelacion> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.DBModelTieneRelacion>(source, global::edzzn.DB.DBModelTieneRelacion.DBModelDomainRoleId);
			foreach ( global::edzzn.DB.DBModelTieneRelacion link in links )
			{
				if ( target.Equals(link.Relacion) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DBModelTieneRelacion link between a given DBModeland a Relacion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::edzzn.DB.DBModelTieneRelacion GetLink( global::edzzn.DB.DBModel source, global::edzzn.DB.Relacion target )
		{
			global::System.Collections.Generic.IList<global::edzzn.DB.DBModelTieneRelacion> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.DBModelTieneRelacion>(source, global::edzzn.DB.DBModelTieneRelacion.DBModelDomainRoleId);
			foreach ( global::edzzn.DB.DBModelTieneRelacion link in links )
			{
				if ( target.Equals(link.Relacion) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace edzzn.DB
{
	/// <summary>
	/// DomainRelationship RelacionReferenciasTabla
	/// Descripción de edzzn.DB.RelacionReferenciasTabla
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.RelacionReferenciasTabla.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.RelacionReferenciasTabla.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0f768ea1-14dc-4b52-96eb-6b936a87efcd")]
	public partial class RelacionReferenciasTabla : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// RelacionReferenciasTabla domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0f768ea1, 0x14dc, 0x4b52, 0x96, 0xeb, 0x6b, 0x93, 0x6a, 0x87, 0xef, 0xcd);
	
				
		/// <summary>
		/// Constructor
		/// Creates a RelacionReferenciasTabla link in the same Partition as the given Relacion
		/// </summary>
		/// <param name="source">Relacion to use as the source of the relationship.</param>
		/// <param name="target">Tabla to use as the target of the relationship.</param>
		public RelacionReferenciasTabla(Relacion source, Tabla target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(RelacionReferenciasTabla.RelacionDomainRoleId, source), new DslModeling::RoleAssignment(RelacionReferenciasTabla.TablaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelacionReferenciasTabla(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelacionReferenciasTabla(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public RelacionReferenciasTabla(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public RelacionReferenciasTabla(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Relacion domain role code
		
		/// <summary>
		/// Relacion domain role Id.
		/// </summary>
		public static readonly global::System.Guid RelacionDomainRoleId = new global::System.Guid(0xe2d8a01a, 0x55b7, 0x487c, 0xa6, 0x25, 0x6d, 0xbb, 0x7b, 0xe3, 0x88, 0xf1);
		
		/// <summary>
		/// DomainRole Relacion
		/// Descripción de edzzn.DB.RelacionReferenciasTabla.Relacion
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.RelacionReferenciasTabla/Relacion.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.RelacionReferenciasTabla/Relacion.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Tabla", PropertyDisplayNameKey="edzzn.DB.RelacionReferenciasTabla/Relacion.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e2d8a01a-55b7-487c-a625-6dbb7be388f1")]
		public virtual Relacion Relacion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Relacion)DslModeling::DomainRoleInfo.GetRolePlayer(this, RelacionDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, RelacionDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Relacion of a Tabla
		/// <summary>
		/// Gets a list of Relacion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Relacion> GetRelacion(Tabla element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Relacion>, Relacion>(element, TablaDomainRoleId);
		}
		#endregion
		#region Tabla domain role code
		
		/// <summary>
		/// Tabla domain role Id.
		/// </summary>
		public static readonly global::System.Guid TablaDomainRoleId = new global::System.Guid(0x92a1c1db, 0xecbf, 0x446a, 0xb8, 0xee, 0xd9, 0xb5, 0xdd, 0x35, 0xa7, 0x65);
		
		/// <summary>
		/// DomainRole Tabla
		/// Descripción de edzzn.DB.RelacionReferenciasTabla.Tabla
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.RelacionReferenciasTabla/Tabla.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.RelacionReferenciasTabla/Tabla.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Relacion", PropertyDisplayNameKey="edzzn.DB.RelacionReferenciasTabla/Tabla.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("92a1c1db-ecbf-446a-b8ee-d9b5dd35a765")]
		public virtual Tabla Tabla
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tabla)DslModeling::DomainRoleInfo.GetRolePlayer(this, TablaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TablaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tabla of a Relacion
		/// <summary>
		/// Gets a list of Tabla.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Tabla> GetTabla(Relacion element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Tabla>, Tabla>(element, RelacionDomainRoleId);
		}
		#endregion
		#region Relacion link accessor
		/// <summary>
		/// Get the list of RelacionReferenciasTabla links to a Relacion.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.RelacionReferenciasTabla> GetLinksToTabla ( global::edzzn.DB.Relacion relacionInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.RelacionReferenciasTabla>(relacionInstance, global::edzzn.DB.RelacionReferenciasTabla.RelacionDomainRoleId);
		}
		#endregion
		#region Tabla link accessor
		/// <summary>
		/// Get the list of RelacionReferenciasTabla links to a Tabla.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.RelacionReferenciasTabla> GetLinksToRelacion ( global::edzzn.DB.Tabla tablaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.RelacionReferenciasTabla>(tablaInstance, global::edzzn.DB.RelacionReferenciasTabla.TablaDomainRoleId);
		}
		#endregion
		#region RelacionReferenciasTabla instance accessors
		
		/// <summary>
		/// Get any RelacionReferenciasTabla links between a given Relacion and a Tabla.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.RelacionReferenciasTabla> GetLinks( global::edzzn.DB.Relacion source, global::edzzn.DB.Tabla target )
		{
			global::System.Collections.Generic.List<global::edzzn.DB.RelacionReferenciasTabla> outLinks = new global::System.Collections.Generic.List<global::edzzn.DB.RelacionReferenciasTabla>();
			global::System.Collections.Generic.IList<global::edzzn.DB.RelacionReferenciasTabla> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.RelacionReferenciasTabla>(source, global::edzzn.DB.RelacionReferenciasTabla.RelacionDomainRoleId);
			foreach ( global::edzzn.DB.RelacionReferenciasTabla link in links )
			{
				if ( target.Equals(link.Tabla) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one RelacionReferenciasTabla link between a given Relacionand a Tabla.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::edzzn.DB.RelacionReferenciasTabla GetLink( global::edzzn.DB.Relacion source, global::edzzn.DB.Tabla target )
		{
			global::System.Collections.Generic.IList<global::edzzn.DB.RelacionReferenciasTabla> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.RelacionReferenciasTabla>(source, global::edzzn.DB.RelacionReferenciasTabla.RelacionDomainRoleId);
			foreach ( global::edzzn.DB.RelacionReferenciasTabla link in links )
			{
				if ( target.Equals(link.Tabla) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace edzzn.DB
{
	/// <summary>
	/// DomainRelationship TriggerTieneEvento
	/// Descripción de edzzn.DB.TriggerTieneEvento
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.TriggerTieneEvento.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.TriggerTieneEvento.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("5be9570d-b6d1-4440-b646-29af488c5633")]
	public partial class TriggerTieneEvento : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TriggerTieneEvento domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5be9570d, 0xb6d1, 0x4440, 0xb6, 0x46, 0x29, 0xaf, 0x48, 0x8c, 0x56, 0x33);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TriggerTieneEvento link in the same Partition as the given Trigger
		/// </summary>
		/// <param name="source">Trigger to use as the source of the relationship.</param>
		/// <param name="target">Evento to use as the target of the relationship.</param>
		public TriggerTieneEvento(Trigger source, Evento target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TriggerTieneEvento.TriggerDomainRoleId, source), new DslModeling::RoleAssignment(TriggerTieneEvento.EventoDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TriggerTieneEvento(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TriggerTieneEvento(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TriggerTieneEvento(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TriggerTieneEvento(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Trigger domain role code
		
		/// <summary>
		/// Trigger domain role Id.
		/// </summary>
		public static readonly global::System.Guid TriggerDomainRoleId = new global::System.Guid(0x30b01368, 0x7b1b, 0x4501, 0x84, 0x83, 0x02, 0xfb, 0xf7, 0x13, 0x71, 0x23);
		
		/// <summary>
		/// DomainRole Trigger
		/// Descripción de edzzn.DB.TriggerTieneEvento.Trigger
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.TriggerTieneEvento/Trigger.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.TriggerTieneEvento/Trigger.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Evento", PropertyDisplayNameKey="edzzn.DB.TriggerTieneEvento/Trigger.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("30b01368-7b1b-4501-8483-02fbf7137123")]
		public virtual Trigger Trigger
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Trigger)DslModeling::DomainRoleInfo.GetRolePlayer(this, TriggerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TriggerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Trigger of a Evento
		/// <summary>
		/// Gets Trigger.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Trigger GetTrigger(Evento element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EventoDomainRoleId) as Trigger;
		}
		
		/// <summary>
		/// Sets Trigger.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTrigger(Evento element, Trigger newTrigger)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EventoDomainRoleId, newTrigger);
		}
		#endregion
		#region Evento domain role code
		
		/// <summary>
		/// Evento domain role Id.
		/// </summary>
		public static readonly global::System.Guid EventoDomainRoleId = new global::System.Guid(0xc74a2010, 0x7d02, 0x4772, 0xb5, 0x5e, 0x21, 0xb2, 0x71, 0x56, 0x60, 0x7d);
		
		/// <summary>
		/// DomainRole Evento
		/// Descripción de edzzn.DB.TriggerTieneEvento.Evento
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.TriggerTieneEvento/Evento.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.TriggerTieneEvento/Evento.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Trigger", PropertyDisplayNameKey="edzzn.DB.TriggerTieneEvento/Evento.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("c74a2010-7d02-4772-b55e-21b27156607d")]
		public virtual Evento Evento
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Evento)DslModeling::DomainRoleInfo.GetRolePlayer(this, EventoDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EventoDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Evento of a Trigger
		/// <summary>
		/// Gets a list of Evento.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Evento> GetEvento(Trigger element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Evento>, Evento>(element, TriggerDomainRoleId);
		}
		#endregion
		#region Trigger link accessor
		/// <summary>
		/// Get the list of TriggerTieneEvento links to a Trigger.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.TriggerTieneEvento> GetLinksToEvento ( global::edzzn.DB.Trigger triggerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.TriggerTieneEvento>(triggerInstance, global::edzzn.DB.TriggerTieneEvento.TriggerDomainRoleId);
		}
		#endregion
		#region Evento link accessor
		/// <summary>
		/// Get the TriggerTieneEvento link to a Evento.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::edzzn.DB.TriggerTieneEvento GetLinkToTrigger (global::edzzn.DB.Evento eventoInstance)
		{
			global::System.Collections.Generic.IList<global::edzzn.DB.TriggerTieneEvento> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.TriggerTieneEvento>(eventoInstance, global::edzzn.DB.TriggerTieneEvento.EventoDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Evento not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TriggerTieneEvento instance accessors
		
		/// <summary>
		/// Get any TriggerTieneEvento links between a given Trigger and a Evento.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.TriggerTieneEvento> GetLinks( global::edzzn.DB.Trigger source, global::edzzn.DB.Evento target )
		{
			global::System.Collections.Generic.List<global::edzzn.DB.TriggerTieneEvento> outLinks = new global::System.Collections.Generic.List<global::edzzn.DB.TriggerTieneEvento>();
			global::System.Collections.Generic.IList<global::edzzn.DB.TriggerTieneEvento> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.TriggerTieneEvento>(source, global::edzzn.DB.TriggerTieneEvento.TriggerDomainRoleId);
			foreach ( global::edzzn.DB.TriggerTieneEvento link in links )
			{
				if ( target.Equals(link.Evento) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TriggerTieneEvento link between a given Triggerand a Evento.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::edzzn.DB.TriggerTieneEvento GetLink( global::edzzn.DB.Trigger source, global::edzzn.DB.Evento target )
		{
			global::System.Collections.Generic.IList<global::edzzn.DB.TriggerTieneEvento> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.TriggerTieneEvento>(source, global::edzzn.DB.TriggerTieneEvento.TriggerDomainRoleId);
			foreach ( global::edzzn.DB.TriggerTieneEvento link in links )
			{
				if ( target.Equals(link.Evento) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace edzzn.DB
{
	/// <summary>
	/// DomainRelationship TriggerReferenciasTabla
	/// Descripción de edzzn.DB.TriggerReferenciasTabla
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.TriggerReferenciasTabla.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.TriggerReferenciasTabla.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("0af6b478-2cfa-4065-871c-6abbeb3e6216")]
	public partial class TriggerReferenciasTabla : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TriggerReferenciasTabla domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x0af6b478, 0x2cfa, 0x4065, 0x87, 0x1c, 0x6a, 0xbb, 0xeb, 0x3e, 0x62, 0x16);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TriggerReferenciasTabla link in the same Partition as the given Trigger
		/// </summary>
		/// <param name="source">Trigger to use as the source of the relationship.</param>
		/// <param name="target">Tabla to use as the target of the relationship.</param>
		public TriggerReferenciasTabla(Trigger source, Tabla target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TriggerReferenciasTabla.TriggerDomainRoleId, source), new DslModeling::RoleAssignment(TriggerReferenciasTabla.TablaDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TriggerReferenciasTabla(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TriggerReferenciasTabla(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TriggerReferenciasTabla(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TriggerReferenciasTabla(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Trigger domain role code
		
		/// <summary>
		/// Trigger domain role Id.
		/// </summary>
		public static readonly global::System.Guid TriggerDomainRoleId = new global::System.Guid(0xd2000cc2, 0x2499, 0x47d1, 0xa1, 0x65, 0xca, 0x2a, 0x74, 0xcc, 0x11, 0x8e);
		
		/// <summary>
		/// DomainRole Trigger
		/// Descripción de edzzn.DB.TriggerReferenciasTabla.Trigger
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.TriggerReferenciasTabla/Trigger.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.TriggerReferenciasTabla/Trigger.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Tabla", PropertyDisplayNameKey="edzzn.DB.TriggerReferenciasTabla/Trigger.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d2000cc2-2499-47d1-a165-ca2a74cc118e")]
		public virtual Trigger Trigger
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Trigger)DslModeling::DomainRoleInfo.GetRolePlayer(this, TriggerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TriggerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Trigger of a Tabla
		/// <summary>
		/// Gets a list of Trigger.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Trigger> GetTrigger(Tabla element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Trigger>, Trigger>(element, TablaDomainRoleId);
		}
		#endregion
		#region Tabla domain role code
		
		/// <summary>
		/// Tabla domain role Id.
		/// </summary>
		public static readonly global::System.Guid TablaDomainRoleId = new global::System.Guid(0x5017c8b9, 0x1b43, 0x49c6, 0x95, 0xa0, 0xd0, 0x0e, 0x06, 0xe3, 0x8a, 0x8c);
		
		/// <summary>
		/// DomainRole Tabla
		/// Descripción de edzzn.DB.TriggerReferenciasTabla.Tabla
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.TriggerReferenciasTabla/Tabla.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.TriggerReferenciasTabla/Tabla.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Trigger", PropertyDisplayNameKey="edzzn.DB.TriggerReferenciasTabla/Tabla.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5017c8b9-1b43-49c6-95a0-d00e06e38a8c")]
		public virtual Tabla Tabla
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tabla)DslModeling::DomainRoleInfo.GetRolePlayer(this, TablaDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TablaDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tabla of a Trigger
		/// <summary>
		/// Gets a list of Tabla.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Tabla> GetTabla(Trigger element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Tabla>, Tabla>(element, TriggerDomainRoleId);
		}
		#endregion
		#region Trigger link accessor
		/// <summary>
		/// Get the list of TriggerReferenciasTabla links to a Trigger.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.TriggerReferenciasTabla> GetLinksToTabla ( global::edzzn.DB.Trigger triggerInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.TriggerReferenciasTabla>(triggerInstance, global::edzzn.DB.TriggerReferenciasTabla.TriggerDomainRoleId);
		}
		#endregion
		#region Tabla link accessor
		/// <summary>
		/// Get the list of TriggerReferenciasTabla links to a Tabla.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.TriggerReferenciasTabla> GetLinksToTrigger ( global::edzzn.DB.Tabla tablaInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.TriggerReferenciasTabla>(tablaInstance, global::edzzn.DB.TriggerReferenciasTabla.TablaDomainRoleId);
		}
		#endregion
		#region TriggerReferenciasTabla instance accessors
		
		/// <summary>
		/// Get any TriggerReferenciasTabla links between a given Trigger and a Tabla.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.TriggerReferenciasTabla> GetLinks( global::edzzn.DB.Trigger source, global::edzzn.DB.Tabla target )
		{
			global::System.Collections.Generic.List<global::edzzn.DB.TriggerReferenciasTabla> outLinks = new global::System.Collections.Generic.List<global::edzzn.DB.TriggerReferenciasTabla>();
			global::System.Collections.Generic.IList<global::edzzn.DB.TriggerReferenciasTabla> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.TriggerReferenciasTabla>(source, global::edzzn.DB.TriggerReferenciasTabla.TriggerDomainRoleId);
			foreach ( global::edzzn.DB.TriggerReferenciasTabla link in links )
			{
				if ( target.Equals(link.Tabla) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TriggerReferenciasTabla link between a given Triggerand a Tabla.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::edzzn.DB.TriggerReferenciasTabla GetLink( global::edzzn.DB.Trigger source, global::edzzn.DB.Tabla target )
		{
			global::System.Collections.Generic.IList<global::edzzn.DB.TriggerReferenciasTabla> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.TriggerReferenciasTabla>(source, global::edzzn.DB.TriggerReferenciasTabla.TriggerDomainRoleId);
			foreach ( global::edzzn.DB.TriggerReferenciasTabla link in links )
			{
				if ( target.Equals(link.Tabla) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace edzzn.DB
{
	/// <summary>
	/// DomainRelationship DBModelTieneTrigger
	/// Descripción de edzzn.DB.DBModelTieneTrigger
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.DBModelTieneTrigger.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.DBModelTieneTrigger.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("07685e06-36cd-4dba-ba4d-1ff6c32c8203")]
	public partial class DBModelTieneTrigger : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// DBModelTieneTrigger domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x07685e06, 0x36cd, 0x4dba, 0xba, 0x4d, 0x1f, 0xf6, 0xc3, 0x2c, 0x82, 0x03);
	
				
		/// <summary>
		/// Constructor
		/// Creates a DBModelTieneTrigger link in the same Partition as the given DBModel
		/// </summary>
		/// <param name="source">DBModel to use as the source of the relationship.</param>
		/// <param name="target">Trigger to use as the target of the relationship.</param>
		public DBModelTieneTrigger(DBModel source, Trigger target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(DBModelTieneTrigger.DBModelDomainRoleId, source), new DslModeling::RoleAssignment(DBModelTieneTrigger.TriggerDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DBModelTieneTrigger(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DBModelTieneTrigger(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public DBModelTieneTrigger(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public DBModelTieneTrigger(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region DBModel domain role code
		
		/// <summary>
		/// DBModel domain role Id.
		/// </summary>
		public static readonly global::System.Guid DBModelDomainRoleId = new global::System.Guid(0xaa568a61, 0x9bac, 0x4833, 0xb1, 0x22, 0x62, 0x2e, 0xac, 0x36, 0x51, 0x25);
		
		/// <summary>
		/// DomainRole DBModel
		/// Descripción de edzzn.DB.DBModelTieneTrigger.DBModel
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.DBModelTieneTrigger/DBModel.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.DBModelTieneTrigger/DBModel.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Trigger", PropertyDisplayNameKey="edzzn.DB.DBModelTieneTrigger/DBModel.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("aa568a61-9bac-4833-b122-622eac365125")]
		public virtual DBModel DBModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (DBModel)DslModeling::DomainRoleInfo.GetRolePlayer(this, DBModelDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, DBModelDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access DBModel of a Trigger
		/// <summary>
		/// Gets DBModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DBModel GetDBModel(Trigger element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TriggerDomainRoleId) as DBModel;
		}
		
		/// <summary>
		/// Sets DBModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetDBModel(Trigger element, DBModel newDBModel)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TriggerDomainRoleId, newDBModel);
		}
		#endregion
		#region Trigger domain role code
		
		/// <summary>
		/// Trigger domain role Id.
		/// </summary>
		public static readonly global::System.Guid TriggerDomainRoleId = new global::System.Guid(0x4def1f0c, 0x81a6, 0x4dc6, 0x93, 0x35, 0xfc, 0xf1, 0x43, 0x84, 0x04, 0x61);
		
		/// <summary>
		/// DomainRole Trigger
		/// Descripción de edzzn.DB.DBModelTieneTrigger.Trigger
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.DBModelTieneTrigger/Trigger.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.DBModelTieneTrigger/Trigger.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "DBModel", PropertyDisplayNameKey="edzzn.DB.DBModelTieneTrigger/Trigger.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("4def1f0c-81a6-4dc6-9335-fcf143840461")]
		public virtual Trigger Trigger
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Trigger)DslModeling::DomainRoleInfo.GetRolePlayer(this, TriggerDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TriggerDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Trigger of a DBModel
		/// <summary>
		/// Gets a list of Trigger.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Trigger> GetTrigger(DBModel element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Trigger>, Trigger>(element, DBModelDomainRoleId);
		}
		#endregion
		#region DBModel link accessor
		/// <summary>
		/// Get the list of DBModelTieneTrigger links to a DBModel.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.DBModelTieneTrigger> GetLinksToTrigger ( global::edzzn.DB.DBModel dBModelInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.DBModelTieneTrigger>(dBModelInstance, global::edzzn.DB.DBModelTieneTrigger.DBModelDomainRoleId);
		}
		#endregion
		#region Trigger link accessor
		/// <summary>
		/// Get the DBModelTieneTrigger link to a Trigger.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::edzzn.DB.DBModelTieneTrigger GetLinkToDBModel (global::edzzn.DB.Trigger triggerInstance)
		{
			global::System.Collections.Generic.IList<global::edzzn.DB.DBModelTieneTrigger> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.DBModelTieneTrigger>(triggerInstance, global::edzzn.DB.DBModelTieneTrigger.TriggerDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Trigger not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region DBModelTieneTrigger instance accessors
		
		/// <summary>
		/// Get any DBModelTieneTrigger links between a given DBModel and a Trigger.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::edzzn.DB.DBModelTieneTrigger> GetLinks( global::edzzn.DB.DBModel source, global::edzzn.DB.Trigger target )
		{
			global::System.Collections.Generic.List<global::edzzn.DB.DBModelTieneTrigger> outLinks = new global::System.Collections.Generic.List<global::edzzn.DB.DBModelTieneTrigger>();
			global::System.Collections.Generic.IList<global::edzzn.DB.DBModelTieneTrigger> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.DBModelTieneTrigger>(source, global::edzzn.DB.DBModelTieneTrigger.DBModelDomainRoleId);
			foreach ( global::edzzn.DB.DBModelTieneTrigger link in links )
			{
				if ( target.Equals(link.Trigger) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one DBModelTieneTrigger link between a given DBModeland a Trigger.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::edzzn.DB.DBModelTieneTrigger GetLink( global::edzzn.DB.DBModel source, global::edzzn.DB.Trigger target )
		{
			global::System.Collections.Generic.IList<global::edzzn.DB.DBModelTieneTrigger> links = DslModeling::DomainRoleInfo.GetElementLinks<global::edzzn.DB.DBModelTieneTrigger>(source, global::edzzn.DB.DBModelTieneTrigger.DBModelDomainRoleId);
			foreach ( global::edzzn.DB.DBModelTieneTrigger link in links )
			{
				if ( target.Equals(link.Trigger) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
