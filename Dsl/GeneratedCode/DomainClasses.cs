//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace edzzn.DB
{
	/// <summary>
	/// DomainClass DBModel
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.DBModel.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.DBModel.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("07a9ae74-87ee-447c-96db-d1e9ce51d3cd")]
	public partial class DBModel : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// DBModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x07a9ae74, 0x87ee, 0x447c, 0x96, 0xdb, 0xd1, 0xe9, 0xce, 0x51, 0xd3, 0xcd);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DBModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public DBModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Elements opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Elements.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ExampleElement> Elements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ExampleElement>, ExampleElement>(global::edzzn.DB.ExampleModelHasElements.DBModelDomainRoleId);
			}
		}
		#endregion
		#region Tabla opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Tabla.
		/// Descripción de edzzn.DB.DBModelTieneTabla.DBModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Tabla> Tabla
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Tabla>, Tabla>(global::edzzn.DB.DBModelTieneTabla.DBModelDomainRoleId);
			}
		}
		#endregion
		#region Vista opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Vista.
		/// Descripción de edzzn.DB.DBModelTieneVista.DBModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Vista> Vista
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Vista>, Vista>(global::edzzn.DB.DBModelTieneVista.DBModelDomainRoleId);
			}
		}
		#endregion
		#region ProcedimientoAlmacenado opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ProcedimientoAlmacenado.
		/// Descripción de edzzn.DB.DBModelTieneProcedimientoAlmacenado.DBModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ProcedimientoAlmacenado> ProcedimientoAlmacenado
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ProcedimientoAlmacenado>, ProcedimientoAlmacenado>(global::edzzn.DB.DBModelTieneProcedimientoAlmacenado.DBModelDomainRoleId);
			}
		}
		#endregion
		#region Relacion opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Relacion.
		/// Descripción de edzzn.DB.DBModelTieneRelacion.DBModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Relacion> Relacion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Relacion>, Relacion>(global::edzzn.DB.DBModelTieneRelacion.DBModelDomainRoleId);
			}
		}
		#endregion
		#region Trigger opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Trigger.
		/// Descripción de edzzn.DB.DBModelTieneTrigger.DBModel
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Trigger> Trigger
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Trigger>, Trigger>(global::edzzn.DB.DBModelTieneTrigger.DBModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::edzzn.DB.ExampleElement.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::edzzn.DB.Tabla.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::edzzn.DB.Vista.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::edzzn.DB.ProcedimientoAlmacenado.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::edzzn.DB.Relacion.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::edzzn.DB.Trigger.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::edzzn.DB.ExampleElement sourceExampleElement1 = sourceElement as global::edzzn.DB.ExampleElement;
			if (sourceExampleElement1 != null)
			{
				// Create link for path ExampleModelHasElements.Elements
				this.Elements.Add(sourceExampleElement1);

				return;
			}
				
			global::edzzn.DB.Tabla sourceTabla2 = sourceElement as global::edzzn.DB.Tabla;
			if (sourceTabla2 != null)
			{
				// Create link for path DBModelTieneTabla.Tabla
				this.Tabla.Add(sourceTabla2);

				return;
			}
				
			global::edzzn.DB.Vista sourceVista3 = sourceElement as global::edzzn.DB.Vista;
			if (sourceVista3 != null)
			{
				// Create link for path DBModelTieneVista.Vista
				this.Vista.Add(sourceVista3);

				return;
			}
				
			global::edzzn.DB.ProcedimientoAlmacenado sourceProcedimientoAlmacenado4 = sourceElement as global::edzzn.DB.ProcedimientoAlmacenado;
			if (sourceProcedimientoAlmacenado4 != null)
			{
				// Create link for path DBModelTieneProcedimientoAlmacenado.ProcedimientoAlmacenado
				this.ProcedimientoAlmacenado.Add(sourceProcedimientoAlmacenado4);

				return;
			}
				
			global::edzzn.DB.Relacion sourceRelacion5 = sourceElement as global::edzzn.DB.Relacion;
			if (sourceRelacion5 != null)
			{
				// Create link for path DBModelTieneRelacion.Relacion
				this.Relacion.Add(sourceRelacion5);

				return;
			}
				
			global::edzzn.DB.Trigger sourceTrigger6 = sourceElement as global::edzzn.DB.Trigger;
			if (sourceTrigger6 != null)
			{
				// Create link for path DBModelTieneTrigger.Trigger
				this.Trigger.Add(sourceTrigger6);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::edzzn.DB.ExampleElement sourceExampleElement1 = sourceElement as global::edzzn.DB.ExampleElement;
			if (sourceExampleElement1 != null)
			{
				// Delete link for path ExampleModelHasElements.Elements
				
				foreach (DslModeling::ElementLink link in global::edzzn.DB.ExampleModelHasElements.GetLinks((global::edzzn.DB.DBModel)this, sourceExampleElement1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::edzzn.DB.ExampleModelHasElements.DBModelDomainRoleId, global::edzzn.DB.ExampleModelHasElements.ElementDomainRoleId);
				}

				return;
			}
				
			global::edzzn.DB.Tabla sourceTabla2 = sourceElement as global::edzzn.DB.Tabla;
			if (sourceTabla2 != null)
			{
				// Delete link for path DBModelTieneTabla.Tabla
				
				foreach (DslModeling::ElementLink link in global::edzzn.DB.DBModelTieneTabla.GetLinks((global::edzzn.DB.DBModel)this, sourceTabla2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::edzzn.DB.DBModelTieneTabla.DBModelDomainRoleId, global::edzzn.DB.DBModelTieneTabla.TablaDomainRoleId);
				}

				return;
			}
				
			global::edzzn.DB.Vista sourceVista3 = sourceElement as global::edzzn.DB.Vista;
			if (sourceVista3 != null)
			{
				// Delete link for path DBModelTieneVista.Vista
				
				foreach (DslModeling::ElementLink link in global::edzzn.DB.DBModelTieneVista.GetLinks((global::edzzn.DB.DBModel)this, sourceVista3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::edzzn.DB.DBModelTieneVista.DBModelDomainRoleId, global::edzzn.DB.DBModelTieneVista.VistaDomainRoleId);
				}

				return;
			}
				
			global::edzzn.DB.ProcedimientoAlmacenado sourceProcedimientoAlmacenado4 = sourceElement as global::edzzn.DB.ProcedimientoAlmacenado;
			if (sourceProcedimientoAlmacenado4 != null)
			{
				// Delete link for path DBModelTieneProcedimientoAlmacenado.ProcedimientoAlmacenado
				
				foreach (DslModeling::ElementLink link in global::edzzn.DB.DBModelTieneProcedimientoAlmacenado.GetLinks((global::edzzn.DB.DBModel)this, sourceProcedimientoAlmacenado4))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::edzzn.DB.DBModelTieneProcedimientoAlmacenado.DBModelDomainRoleId, global::edzzn.DB.DBModelTieneProcedimientoAlmacenado.ProcedimientoAlmacenadoDomainRoleId);
				}

				return;
			}
				
			global::edzzn.DB.Relacion sourceRelacion5 = sourceElement as global::edzzn.DB.Relacion;
			if (sourceRelacion5 != null)
			{
				// Delete link for path DBModelTieneRelacion.Relacion
				
				foreach (DslModeling::ElementLink link in global::edzzn.DB.DBModelTieneRelacion.GetLinks((global::edzzn.DB.DBModel)this, sourceRelacion5))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::edzzn.DB.DBModelTieneRelacion.DBModelDomainRoleId, global::edzzn.DB.DBModelTieneRelacion.RelacionDomainRoleId);
				}

				return;
			}
				
			global::edzzn.DB.Trigger sourceTrigger6 = sourceElement as global::edzzn.DB.Trigger;
			if (sourceTrigger6 != null)
			{
				// Delete link for path DBModelTieneTrigger.Trigger
				
				foreach (DslModeling::ElementLink link in global::edzzn.DB.DBModelTieneTrigger.GetLinks((global::edzzn.DB.DBModel)this, sourceTrigger6))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::edzzn.DB.DBModelTieneTrigger.DBModelDomainRoleId, global::edzzn.DB.DBModelTieneTrigger.TriggerDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace edzzn.DB
{
	/// <summary>
	/// DomainClass ExampleElement
	/// Elements embedded in the model. Appear as boxes on the diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.ExampleElement.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.ExampleElement.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("94b1954a-d1f8-4ff4-95db-6070083b9475")]
	public partial class ExampleElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ExampleElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x94b1954a, 0xd1f8, 0x4ff4, 0x95, 0xdb, 0x60, 0x70, 0x08, 0x3b, 0x94, 0x75);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExampleElement(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ExampleElement(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x7cf89d87, 0x7150, 0x4011, 0xb4, 0x0d, 0x57, 0xcc, 0x8c, 0x6b, 0xf2, 0x2e);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for edzzn.DB.ExampleElement.Name
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.ExampleElement/Name.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.ExampleElement/Name.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("7cf89d87-7150-4011-b40d-57cc8c6bf22e")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ExampleElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ExampleElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ExampleElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ExampleElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ExampleElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ExampleElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DBModel opposite domain role accessor
		/// <summary>
		/// Gets or sets DBModel.
		/// </summary>
		public virtual DBModel DBModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::edzzn.DB.ExampleModelHasElements.ElementDomainRoleId) as DBModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::edzzn.DB.ExampleModelHasElements.ElementDomainRoleId, value);
			}
		}
		#endregion
		#region Targets opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Targets.
		/// Description for edzzn.DB.ExampleRelationship.Target
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ExampleElement> Targets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ExampleElement>, ExampleElement>(global::edzzn.DB.ExampleElementReferencesTargets.SourceDomainRoleId);
			}
		}
		#endregion
		#region Sources opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Sources.
		/// Description for edzzn.DB.ExampleRelationship.Source
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ExampleElement> Sources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ExampleElement>, ExampleElement>(global::edzzn.DB.ExampleElementReferencesTargets.TargetDomainRoleId);
			}
		}
		#endregion
	}
}
namespace edzzn.DB
{
	/// <summary>
	/// DomainClass Tabla
	/// Descripción de edzzn.DB.Tabla
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.Tabla.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.Tabla.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Nombre = {nombrePropertyStorage})")]
	[DslModeling::DomainObjectId("3182c64b-c147-4ee9-b24a-a05e8d86cde4")]
	public partial class Tabla : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Tabla domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3182c64b, 0xc147, 0x4ee9, 0xb2, 0x4a, 0xa0, 0x5e, 0x8d, 0x86, 0xcd, 0xe4);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Tabla(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Tabla(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Nombre domain property code
		
		/// <summary>
		/// Nombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid NombreDomainPropertyId = new global::System.Guid(0xff598a15, 0xdae3, 0x4f51, 0xb5, 0x89, 0xb3, 0x3e, 0x9c, 0x58, 0xae, 0x7f);
		
		/// <summary>
		/// Storage for Nombre
		/// </summary>
		private global::System.String nombrePropertyStorage = "Tabla";
		
		/// <summary>
		/// Gets or sets the value of Nombre domain property.
		/// Descripción de edzzn.DB.Tabla.Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.Tabla/Nombre.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.Tabla/Nombre.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Tabla")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("ff598a15-dae3-4f51-b589-b33e9c58ae7f")]
		public global::System.String Nombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Tabla.Nombre domain property.
		/// </summary>
		internal sealed partial class NombrePropertyHandler : DslModeling::DomainPropertyValueHandler<Tabla, global::System.String>
		{
			private NombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Tabla.Nombre domain property value handler.
			/// </summary>
			public static readonly NombrePropertyHandler Instance = new NombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Tabla.Nombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Tabla element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Tabla element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DBModel opposite domain role accessor
		/// <summary>
		/// Gets or sets DBModel.
		/// Descripción de edzzn.DB.DBModelTieneTabla.Tabla
		/// </summary>
		public virtual DBModel DBModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::edzzn.DB.DBModelTieneTabla.TablaDomainRoleId) as DBModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::edzzn.DB.DBModelTieneTabla.TablaDomainRoleId, value);
			}
		}
		#endregion
		#region Campo opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Campo.
		/// Descripción de edzzn.DB.TablaTieneCampo.Tabla
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Campo> Campo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Campo>, Campo>(global::edzzn.DB.TablaTieneCampo.TablaDomainRoleId);
			}
		}
		#endregion
		#region ClavePrimaria opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ClavePrimaria.
		/// Descripción de edzzn.DB.TablaTieneClavePrimaria.Tabla
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ClavePrimaria> ClavePrimaria
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ClavePrimaria>, ClavePrimaria>(global::edzzn.DB.TablaTieneClavePrimaria.TablaDomainRoleId);
			}
		}
		#endregion
		#region Relacion opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Relacion.
		/// Descripción de edzzn.DB.RelacionReferenciasTabla.Tabla
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Relacion> Relacion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Relacion>, Relacion>(global::edzzn.DB.RelacionReferenciasTabla.TablaDomainRoleId);
			}
		}
		#endregion
		#region Trigger opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Trigger.
		/// Descripción de edzzn.DB.TriggerReferenciasTabla.Tabla
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Trigger> Trigger
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Trigger>, Trigger>(global::edzzn.DB.TriggerReferenciasTabla.TablaDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::edzzn.DB.Campo.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::edzzn.DB.ClavePrimaria.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::edzzn.DB.Campo sourceCampo1 = sourceElement as global::edzzn.DB.Campo;
			if (sourceCampo1 != null)
			{
				// Create link for path TablaTieneCampo.Campo
				this.Campo.Add(sourceCampo1);

				return;
			}
				
			global::edzzn.DB.ClavePrimaria sourceClavePrimaria2 = sourceElement as global::edzzn.DB.ClavePrimaria;
			if (sourceClavePrimaria2 != null)
			{
				// Create link for path TablaTieneClavePrimaria.ClavePrimaria
				this.ClavePrimaria.Add(sourceClavePrimaria2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::edzzn.DB.Campo sourceCampo1 = sourceElement as global::edzzn.DB.Campo;
			if (sourceCampo1 != null)
			{
				// Delete link for path TablaTieneCampo.Campo
				
				foreach (DslModeling::ElementLink link in global::edzzn.DB.TablaTieneCampo.GetLinks((global::edzzn.DB.Tabla)this, sourceCampo1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::edzzn.DB.TablaTieneCampo.TablaDomainRoleId, global::edzzn.DB.TablaTieneCampo.CampoDomainRoleId);
				}

				return;
			}
				
			global::edzzn.DB.ClavePrimaria sourceClavePrimaria2 = sourceElement as global::edzzn.DB.ClavePrimaria;
			if (sourceClavePrimaria2 != null)
			{
				// Delete link for path TablaTieneClavePrimaria.ClavePrimaria
				
				foreach (DslModeling::ElementLink link in global::edzzn.DB.TablaTieneClavePrimaria.GetLinks((global::edzzn.DB.Tabla)this, sourceClavePrimaria2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::edzzn.DB.TablaTieneClavePrimaria.TablaDomainRoleId, global::edzzn.DB.TablaTieneClavePrimaria.ClavePrimariaDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace edzzn.DB
{
	/// <summary>
	/// DomainClass Vista
	/// Descripción de edzzn.DB.Vista
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.Vista.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.Vista.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("9f3f5fe8-a3be-4ffd-85a7-cb7b96f2efd1")]
	public partial class Vista : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Vista domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x9f3f5fe8, 0xa3be, 0x4ffd, 0x85, 0xa7, 0xcb, 0x7b, 0x96, 0xf2, 0xef, 0xd1);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Vista(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Vista(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x9228cad2, 0x9569, 0x4d22, 0xb5, 0x7b, 0x1d, 0x92, 0x4b, 0x08, 0xde, 0x5f);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = "Vista";
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Descripción de edzzn.DB.Vista.Name
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.Vista/Name.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.Vista/Name.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Vista")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("9228cad2-9569-4d22-b57b-1d924b08de5f")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Vista.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Vista, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Vista.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Vista.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Vista element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Vista element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SqlQuery domain property code
		
		/// <summary>
		/// SqlQuery domain property Id.
		/// </summary>
		public static readonly global::System.Guid SqlQueryDomainPropertyId = new global::System.Guid(0xb5ad672a, 0x8ae9, 0x4cf2, 0x9a, 0xe4, 0xb1, 0x4f, 0xcb, 0x7a, 0x1b, 0x49);
		
		/// <summary>
		/// Storage for SqlQuery
		/// </summary>
		private global::System.String sqlQueryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SqlQuery domain property.
		/// Descripción de edzzn.DB.Vista.Sql Query
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.Vista/SqlQuery.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.Vista/SqlQuery.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b5ad672a-8ae9-4cf2-9ae4-b14fcb7a1b49")]
		public global::System.String SqlQuery
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sqlQueryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SqlQueryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Vista.SqlQuery domain property.
		/// </summary>
		internal sealed partial class SqlQueryPropertyHandler : DslModeling::DomainPropertyValueHandler<Vista, global::System.String>
		{
			private SqlQueryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Vista.SqlQuery domain property value handler.
			/// </summary>
			public static readonly SqlQueryPropertyHandler Instance = new SqlQueryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Vista.SqlQuery domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SqlQueryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Vista element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sqlQueryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Vista element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sqlQueryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DBModel opposite domain role accessor
		/// <summary>
		/// Gets or sets DBModel.
		/// Descripción de edzzn.DB.DBModelTieneVista.Vista
		/// </summary>
		public virtual DBModel DBModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::edzzn.DB.DBModelTieneVista.VistaDomainRoleId) as DBModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::edzzn.DB.DBModelTieneVista.VistaDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace edzzn.DB
{
	/// <summary>
	/// DomainClass ProcedimientoAlmacenado
	/// Descripción de edzzn.DB.ProcedimientoAlmacenado
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.ProcedimientoAlmacenado.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.ProcedimientoAlmacenado.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Nombre = {nombrePropertyStorage})")]
	[DslModeling::DomainObjectId("5106ed49-f477-4c6f-8ba7-f3bb39d62d46")]
	public partial class ProcedimientoAlmacenado : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ProcedimientoAlmacenado domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5106ed49, 0xf477, 0x4c6f, 0x8b, 0xa7, 0xf3, 0xbb, 0x39, 0xd6, 0x2d, 0x46);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ProcedimientoAlmacenado(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ProcedimientoAlmacenado(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Nombre domain property code
		
		/// <summary>
		/// Nombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid NombreDomainPropertyId = new global::System.Guid(0x936b1310, 0x4a7d, 0x4e04, 0x9e, 0x00, 0x17, 0xa8, 0x55, 0x6a, 0x22, 0x62);
		
		/// <summary>
		/// Storage for Nombre
		/// </summary>
		private global::System.String nombrePropertyStorage = "Procedimiento Almacenado";
		
		/// <summary>
		/// Gets or sets the value of Nombre domain property.
		/// Descripción de edzzn.DB.ProcedimientoAlmacenado.Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.ProcedimientoAlmacenado/Nombre.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.ProcedimientoAlmacenado/Nombre.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Procedimiento Almacenado")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("936b1310-4a7d-4e04-9e00-17a8556a2262")]
		public global::System.String Nombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProcedimientoAlmacenado.Nombre domain property.
		/// </summary>
		internal sealed partial class NombrePropertyHandler : DslModeling::DomainPropertyValueHandler<ProcedimientoAlmacenado, global::System.String>
		{
			private NombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProcedimientoAlmacenado.Nombre domain property value handler.
			/// </summary>
			public static readonly NombrePropertyHandler Instance = new NombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProcedimientoAlmacenado.Nombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ProcedimientoAlmacenado element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProcedimientoAlmacenado element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SqlQuery domain property code
		
		/// <summary>
		/// SqlQuery domain property Id.
		/// </summary>
		public static readonly global::System.Guid SqlQueryDomainPropertyId = new global::System.Guid(0x58c291df, 0x0ce0, 0x4fe3, 0x8f, 0x5d, 0x05, 0x69, 0x55, 0xf3, 0x72, 0x0e);
		
		/// <summary>
		/// Storage for SqlQuery
		/// </summary>
		private global::System.String sqlQueryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SqlQuery domain property.
		/// Descripción de edzzn.DB.ProcedimientoAlmacenado.Sql Query
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.ProcedimientoAlmacenado/SqlQuery.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.ProcedimientoAlmacenado/SqlQuery.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("58c291df-0ce0-4fe3-8f5d-056955f3720e")]
		public global::System.String SqlQuery
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sqlQueryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SqlQueryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ProcedimientoAlmacenado.SqlQuery domain property.
		/// </summary>
		internal sealed partial class SqlQueryPropertyHandler : DslModeling::DomainPropertyValueHandler<ProcedimientoAlmacenado, global::System.String>
		{
			private SqlQueryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ProcedimientoAlmacenado.SqlQuery domain property value handler.
			/// </summary>
			public static readonly SqlQueryPropertyHandler Instance = new SqlQueryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ProcedimientoAlmacenado.SqlQuery domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SqlQueryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ProcedimientoAlmacenado element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sqlQueryPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ProcedimientoAlmacenado element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sqlQueryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DBModel opposite domain role accessor
		/// <summary>
		/// Gets or sets DBModel.
		/// Descripción de
		/// edzzn.DB.DBModelTieneProcedimientoAlmacenado.ProcedimientoAlmacenado
		/// </summary>
		public virtual DBModel DBModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::edzzn.DB.DBModelTieneProcedimientoAlmacenado.ProcedimientoAlmacenadoDomainRoleId) as DBModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::edzzn.DB.DBModelTieneProcedimientoAlmacenado.ProcedimientoAlmacenadoDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace edzzn.DB
{
	/// <summary>
	/// DomainClass Campo
	/// Descripción de edzzn.DB.Campo
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.Campo.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.Campo.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Nombre = {nombrePropertyStorage})")]
	[DslModeling::DomainObjectId("e776f18e-9631-403d-9d54-8564b4a1691b")]
	public partial class Campo : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Campo domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe776f18e, 0x9631, 0x403d, 0x9d, 0x54, 0x85, 0x64, 0xb4, 0xa1, 0x69, 0x1b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Campo(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Campo(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Nombre domain property code
		
		/// <summary>
		/// Nombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid NombreDomainPropertyId = new global::System.Guid(0x9081251f, 0x77c8, 0x4114, 0xa0, 0x26, 0xd9, 0xbf, 0xb9, 0x90, 0x0d, 0x50);
		
		/// <summary>
		/// Storage for Nombre
		/// </summary>
		private global::System.String nombrePropertyStorage = "Campo";
		
		/// <summary>
		/// Gets or sets the value of Nombre domain property.
		/// Descripción de edzzn.DB.Campo.Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.Campo/Nombre.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.Campo/Nombre.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("Campo")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("9081251f-77c8-4114-a026-d9bfb9900d50")]
		public global::System.String Nombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Campo.Nombre domain property.
		/// </summary>
		internal sealed partial class NombrePropertyHandler : DslModeling::DomainPropertyValueHandler<Campo, global::System.String>
		{
			private NombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Campo.Nombre domain property value handler.
			/// </summary>
			public static readonly NombrePropertyHandler Instance = new NombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Campo.Nombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Campo element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Campo element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Valor domain property code
		
		/// <summary>
		/// Valor domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValorDomainPropertyId = new global::System.Guid(0xc666b0d4, 0xb87e, 0x4451, 0x91, 0xb6, 0x43, 0x9c, 0xd0, 0xfe, 0xff, 0xba);
		
		/// <summary>
		/// Storage for Valor
		/// </summary>
		private global::System.String valorPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Valor domain property.
		/// Descripción de edzzn.DB.Campo.Valor
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.Campo/Valor.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.Campo/Valor.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("c666b0d4-b87e-4451-91b6-439cd0feffba")]
		public global::System.String Valor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return valorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Campo.Valor domain property.
		/// </summary>
		internal sealed partial class ValorPropertyHandler : DslModeling::DomainPropertyValueHandler<Campo, global::System.String>
		{
			private ValorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Campo.Valor domain property value handler.
			/// </summary>
			public static readonly ValorPropertyHandler Instance = new ValorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Campo.Valor domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Campo element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.valorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Campo element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.valorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Tipo domain property code
		
		/// <summary>
		/// Tipo domain property Id.
		/// </summary>
		public static readonly global::System.Guid TipoDomainPropertyId = new global::System.Guid(0x90a3259e, 0xf70d, 0x484b, 0xb9, 0xa1, 0xbb, 0xa9, 0x0e, 0x44, 0x6d, 0xd8);
		
		/// <summary>
		/// Storage for Tipo
		/// </summary>
		private global::System.String tipoPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Tipo domain property.
		/// Descripción de edzzn.DB.Campo.Tipo
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.Campo/Tipo.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.Campo/Tipo.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("90a3259e-f70d-484b-b9a1-bba90e446dd8")]
		public global::System.String Tipo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tipoPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TipoPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Campo.Tipo domain property.
		/// </summary>
		internal sealed partial class TipoPropertyHandler : DslModeling::DomainPropertyValueHandler<Campo, global::System.String>
		{
			private TipoPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Campo.Tipo domain property value handler.
			/// </summary>
			public static readonly TipoPropertyHandler Instance = new TipoPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Campo.Tipo domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TipoDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Campo element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tipoPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Campo element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tipoPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Tabla opposite domain role accessor
		/// <summary>
		/// Gets or sets Tabla.
		/// Descripción de edzzn.DB.TablaTieneCampo.Campo
		/// </summary>
		public virtual Tabla Tabla
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::edzzn.DB.TablaTieneCampo.CampoDomainRoleId) as Tabla;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::edzzn.DB.TablaTieneCampo.CampoDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace edzzn.DB
{
	/// <summary>
	/// DomainClass ClavePrimaria
	/// Descripción de edzzn.DB.ClavePrimaria
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.ClavePrimaria.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.ClavePrimaria.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Nombre = {nombrePropertyStorage})")]
	[DslModeling::DomainObjectId("e014086d-76f9-4aa9-899f-dc591b31ab7b")]
	public partial class ClavePrimaria : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ClavePrimaria domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xe014086d, 0x76f9, 0x4aa9, 0x89, 0x9f, 0xdc, 0x59, 0x1b, 0x31, 0xab, 0x7b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClavePrimaria(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClavePrimaria(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Nombre domain property code
		
		/// <summary>
		/// Nombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid NombreDomainPropertyId = new global::System.Guid(0xd47e5552, 0x035f, 0x4b57, 0xb6, 0x8d, 0x01, 0xbc, 0xd9, 0xda, 0x37, 0xba);
		
		/// <summary>
		/// Storage for Nombre
		/// </summary>
		private global::System.String nombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Nombre domain property.
		/// Descripción de edzzn.DB.ClavePrimaria.Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.ClavePrimaria/Nombre.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.ClavePrimaria/Nombre.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("d47e5552-035f-4b57-b68d-01bcd9da37ba")]
		public global::System.String Nombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClavePrimaria.Nombre domain property.
		/// </summary>
		internal sealed partial class NombrePropertyHandler : DslModeling::DomainPropertyValueHandler<ClavePrimaria, global::System.String>
		{
			private NombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClavePrimaria.Nombre domain property value handler.
			/// </summary>
			public static readonly NombrePropertyHandler Instance = new NombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClavePrimaria.Nombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ClavePrimaria element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClavePrimaria element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Tabla opposite domain role accessor
		/// <summary>
		/// Gets or sets Tabla.
		/// Descripción de edzzn.DB.TablaTieneClavePrimaria.ClavePrimaria
		/// </summary>
		public virtual Tabla Tabla
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::edzzn.DB.TablaTieneClavePrimaria.ClavePrimariaDomainRoleId) as Tabla;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::edzzn.DB.TablaTieneClavePrimaria.ClavePrimariaDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace edzzn.DB
{
	/// <summary>
	/// DomainClass Relacion
	/// Descripción de edzzn.DB.Relacion
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.Relacion.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.Relacion.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Nombre = {nombrePropertyStorage})")]
	[DslModeling::DomainObjectId("ca4324ed-bb8b-4a6a-a381-2b282b9684a3")]
	public partial class Relacion : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Relacion domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xca4324ed, 0xbb8b, 0x4a6a, 0xa3, 0x81, 0x2b, 0x28, 0x2b, 0x96, 0x84, 0xa3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Relacion(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Relacion(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Nombre domain property code
		
		/// <summary>
		/// Nombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid NombreDomainPropertyId = new global::System.Guid(0x919366a5, 0x5e51, 0x47aa, 0xbe, 0xe6, 0x51, 0xca, 0x5c, 0x5c, 0x5f, 0x49);
		
		/// <summary>
		/// Storage for Nombre
		/// </summary>
		private global::System.String nombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Nombre domain property.
		/// Descripción de edzzn.DB.Relacion.Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.Relacion/Nombre.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.Relacion/Nombre.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("919366a5-5e51-47aa-bee6-51ca5c5c5f49")]
		public global::System.String Nombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Relacion.Nombre domain property.
		/// </summary>
		internal sealed partial class NombrePropertyHandler : DslModeling::DomainPropertyValueHandler<Relacion, global::System.String>
		{
			private NombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Relacion.Nombre domain property value handler.
			/// </summary>
			public static readonly NombrePropertyHandler Instance = new NombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Relacion.Nombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Relacion element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Relacion element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region DBModel opposite domain role accessor
		/// <summary>
		/// Gets or sets DBModel.
		/// Descripción de edzzn.DB.DBModelTieneRelacion.Relacion
		/// </summary>
		public virtual DBModel DBModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::edzzn.DB.DBModelTieneRelacion.RelacionDomainRoleId) as DBModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::edzzn.DB.DBModelTieneRelacion.RelacionDomainRoleId, value);
			}
		}
		#endregion
		#region Tabla opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Tabla.
		/// Descripción de edzzn.DB.RelacionReferenciasTabla.Relacion
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Tabla> Tabla
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Tabla>, Tabla>(global::edzzn.DB.RelacionReferenciasTabla.RelacionDomainRoleId);
			}
		}
		#endregion
	}
}
namespace edzzn.DB
{
	/// <summary>
	/// DomainClass Trigger
	/// Descripción de edzzn.DB.Trigger
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.Trigger.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.Trigger.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Nombre = {nombrePropertyStorage})")]
	[DslModeling::DomainObjectId("6360e843-60ee-4094-b9fb-b7af00c727d5")]
	public partial class Trigger : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Trigger domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6360e843, 0x60ee, 0x4094, 0xb9, 0xfb, 0xb7, 0xaf, 0x00, 0xc7, 0x27, 0xd5);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Trigger(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Trigger(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Nombre domain property code
		
		/// <summary>
		/// Nombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid NombreDomainPropertyId = new global::System.Guid(0x547ffb4f, 0x4d12, 0x429b, 0x9b, 0x9f, 0xab, 0x89, 0x4e, 0x23, 0x34, 0xb0);
		
		/// <summary>
		/// Storage for Nombre
		/// </summary>
		private global::System.String nombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Nombre domain property.
		/// Descripción de edzzn.DB.Trigger.Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.Trigger/Nombre.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.Trigger/Nombre.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("547ffb4f-4d12-429b-9b9f-ab894e2334b0")]
		public global::System.String Nombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Trigger.Nombre domain property.
		/// </summary>
		internal sealed partial class NombrePropertyHandler : DslModeling::DomainPropertyValueHandler<Trigger, global::System.String>
		{
			private NombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Trigger.Nombre domain property value handler.
			/// </summary>
			public static readonly NombrePropertyHandler Instance = new NombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Trigger.Nombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Trigger element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Trigger element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SQL domain property code
		
		/// <summary>
		/// SQL domain property Id.
		/// </summary>
		public static readonly global::System.Guid SQLDomainPropertyId = new global::System.Guid(0xba573485, 0xe2be, 0x4988, 0xb0, 0xb1, 0xab, 0xc0, 0xd1, 0x32, 0x73, 0x05);
		
		/// <summary>
		/// Storage for SQL
		/// </summary>
		private global::System.String sQLPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SQL domain property.
		/// Descripción de edzzn.DB.Trigger.SQL
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.Trigger/SQL.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.Trigger/SQL.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ba573485-e2be-4988-b0b1-abc0d1327305")]
		public global::System.String SQL
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sQLPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SQLPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Trigger.SQL domain property.
		/// </summary>
		internal sealed partial class SQLPropertyHandler : DslModeling::DomainPropertyValueHandler<Trigger, global::System.String>
		{
			private SQLPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Trigger.SQL domain property value handler.
			/// </summary>
			public static readonly SQLPropertyHandler Instance = new SQLPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Trigger.SQL domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SQLDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Trigger element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sQLPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Trigger element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sQLPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Evento opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Evento.
		/// Descripción de edzzn.DB.TriggerTieneEvento.Trigger
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Evento> Evento
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Evento>, Evento>(global::edzzn.DB.TriggerTieneEvento.TriggerDomainRoleId);
			}
		}
		#endregion
		#region Tabla opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Tabla.
		/// Descripción de edzzn.DB.TriggerReferenciasTabla.Trigger
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Tabla> Tabla
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Tabla>, Tabla>(global::edzzn.DB.TriggerReferenciasTabla.TriggerDomainRoleId);
			}
		}
		#endregion
		#region DBModel opposite domain role accessor
		/// <summary>
		/// Gets or sets DBModel.
		/// Descripción de edzzn.DB.DBModelTieneTrigger.Trigger
		/// </summary>
		public virtual DBModel DBModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::edzzn.DB.DBModelTieneTrigger.TriggerDomainRoleId) as DBModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::edzzn.DB.DBModelTieneTrigger.TriggerDomainRoleId, value);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::edzzn.DB.Evento.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::edzzn.DB.Evento sourceEvento1 = sourceElement as global::edzzn.DB.Evento;
			if (sourceEvento1 != null)
			{
				// Create link for path TriggerTieneEvento.Evento
				this.Evento.Add(sourceEvento1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::edzzn.DB.Evento sourceEvento1 = sourceElement as global::edzzn.DB.Evento;
			if (sourceEvento1 != null)
			{
				// Delete link for path TriggerTieneEvento.Evento
				
				foreach (DslModeling::ElementLink link in global::edzzn.DB.TriggerTieneEvento.GetLinks((global::edzzn.DB.Trigger)this, sourceEvento1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::edzzn.DB.TriggerTieneEvento.TriggerDomainRoleId, global::edzzn.DB.TriggerTieneEvento.EventoDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace edzzn.DB
{
	/// <summary>
	/// DomainClass Evento
	/// Descripción de edzzn.DB.Evento
	/// </summary>
	[DslDesign::DisplayNameResource("edzzn.DB.Evento.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("edzzn.DB.Evento.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::edzzn.DB.DBDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Nombre = {nombrePropertyStorage})")]
	[DslModeling::DomainObjectId("381486f6-7e93-4585-a789-d38492dc10e3")]
	public partial class Evento : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Evento domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x381486f6, 0x7e93, 0x4585, 0xa7, 0x89, 0xd3, 0x84, 0x92, 0xdc, 0x10, 0xe3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Evento(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Evento(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Nombre domain property code
		
		/// <summary>
		/// Nombre domain property Id.
		/// </summary>
		public static readonly global::System.Guid NombreDomainPropertyId = new global::System.Guid(0xa7abdb7e, 0x37d2, 0x42e0, 0x8c, 0x7e, 0x8f, 0x6f, 0x0e, 0x4a, 0x0f, 0x0e);
		
		/// <summary>
		/// Storage for Nombre
		/// </summary>
		private global::System.String nombrePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Nombre domain property.
		/// Descripción de edzzn.DB.Evento.Nombre
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.Evento/Nombre.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.Evento/Nombre.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("a7abdb7e-37d2-42e0-8c7e-8f6f0e4a0f0e")]
		public global::System.String Nombre
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nombrePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NombrePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Evento.Nombre domain property.
		/// </summary>
		internal sealed partial class NombrePropertyHandler : DslModeling::DomainPropertyValueHandler<Evento, global::System.String>
		{
			private NombrePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Evento.Nombre domain property value handler.
			/// </summary>
			public static readonly NombrePropertyHandler Instance = new NombrePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Evento.Nombre domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NombreDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Evento element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.nombrePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Evento element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nombrePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Tipo domain property code
		
		/// <summary>
		/// Tipo domain property Id.
		/// </summary>
		public static readonly global::System.Guid TipoDomainPropertyId = new global::System.Guid(0xf30cb29f, 0xe568, 0x494b, 0xb4, 0x94, 0x77, 0x64, 0x46, 0x5f, 0x65, 0xd7);
		
		/// <summary>
		/// Storage for Tipo
		/// </summary>
		private global::System.String tipoPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Tipo domain property.
		/// Descripción de edzzn.DB.Evento.Tipo
		/// </summary>
		[DslDesign::DisplayNameResource("edzzn.DB.Evento/Tipo.DisplayName", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("edzzn.DB.Evento/Tipo.Description", typeof(global::edzzn.DB.DBDomainModel), "edzzn.DB.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f30cb29f-e568-494b-b494-7764465f65d7")]
		public global::System.String Tipo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tipoPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TipoPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Evento.Tipo domain property.
		/// </summary>
		internal sealed partial class TipoPropertyHandler : DslModeling::DomainPropertyValueHandler<Evento, global::System.String>
		{
			private TipoPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Evento.Tipo domain property value handler.
			/// </summary>
			public static readonly TipoPropertyHandler Instance = new TipoPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Evento.Tipo domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TipoDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Evento element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.tipoPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Evento element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tipoPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Trigger opposite domain role accessor
		/// <summary>
		/// Gets or sets Trigger.
		/// Descripción de edzzn.DB.TriggerTieneEvento.Evento
		/// </summary>
		public virtual Trigger Trigger
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::edzzn.DB.TriggerTieneEvento.EventoDomainRoleId) as Trigger;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::edzzn.DB.TriggerTieneEvento.EventoDomainRoleId, value);
			}
		}
		#endregion
	}
}
